
Flash_Memory.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003600  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003788  08003788  00013788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003798  08003798  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  08003798  08003798  00013798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037a0  080037a0  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037a0  080037a0  000137a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037a4  080037a4  000137a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  080037a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  20000028  080037d0  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000414  080037d0  00020414  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d6bb  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002262  00000000  00000000  0002d713  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009b0  00000000  00000000  0002f978  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008b8  00000000  00000000  00030328  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021cd0  00000000  00000000  00030be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000097b7  00000000  00000000  000528b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c86cd  00000000  00000000  0005c067  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00124734  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026cc  00000000  00000000  001247b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003770 	.word	0x08003770

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	08003770 	.word	0x08003770

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <GetSector>:
 *  Sector 4 as 64KB
 *  Sector 5 to Sector 7 each 128KB
 */

static uint32_t GetSector(uint32_t Address)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 80004d0:	2300      	movs	r3, #0
 80004d2:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4a44      	ldr	r2, [pc, #272]	; (80005e8 <GetSector+0x120>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d806      	bhi.n	80004ea <GetSector+0x22>
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80004e2:	d302      	bcc.n	80004ea <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 80004e4:	2300      	movs	r3, #0
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	e077      	b.n	80005da <GetSector+0x112>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4a3f      	ldr	r2, [pc, #252]	; (80005ec <GetSector+0x124>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d806      	bhi.n	8000500 <GetSector+0x38>
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4a3e      	ldr	r2, [pc, #248]	; (80005f0 <GetSector+0x128>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d902      	bls.n	8000500 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 80004fa:	2301      	movs	r3, #1
 80004fc:	60fb      	str	r3, [r7, #12]
 80004fe:	e06c      	b.n	80005da <GetSector+0x112>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	4a3c      	ldr	r2, [pc, #240]	; (80005f4 <GetSector+0x12c>)
 8000504:	4293      	cmp	r3, r2
 8000506:	d806      	bhi.n	8000516 <GetSector+0x4e>
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	4a3b      	ldr	r2, [pc, #236]	; (80005f8 <GetSector+0x130>)
 800050c:	4293      	cmp	r3, r2
 800050e:	d902      	bls.n	8000516 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8000510:	2302      	movs	r3, #2
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	e061      	b.n	80005da <GetSector+0x112>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4a38      	ldr	r2, [pc, #224]	; (80005fc <GetSector+0x134>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d806      	bhi.n	800052c <GetSector+0x64>
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4a37      	ldr	r2, [pc, #220]	; (8000600 <GetSector+0x138>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d902      	bls.n	800052c <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 8000526:	2303      	movs	r3, #3
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	e056      	b.n	80005da <GetSector+0x112>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	4a35      	ldr	r2, [pc, #212]	; (8000604 <GetSector+0x13c>)
 8000530:	4293      	cmp	r3, r2
 8000532:	d806      	bhi.n	8000542 <GetSector+0x7a>
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4a34      	ldr	r2, [pc, #208]	; (8000608 <GetSector+0x140>)
 8000538:	4293      	cmp	r3, r2
 800053a:	d902      	bls.n	8000542 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 800053c:	2304      	movs	r3, #4
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	e04b      	b.n	80005da <GetSector+0x112>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4a31      	ldr	r2, [pc, #196]	; (800060c <GetSector+0x144>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d806      	bhi.n	8000558 <GetSector+0x90>
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4a30      	ldr	r2, [pc, #192]	; (8000610 <GetSector+0x148>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d902      	bls.n	8000558 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 8000552:	2305      	movs	r3, #5
 8000554:	60fb      	str	r3, [r7, #12]
 8000556:	e040      	b.n	80005da <GetSector+0x112>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	4a2e      	ldr	r2, [pc, #184]	; (8000614 <GetSector+0x14c>)
 800055c:	4293      	cmp	r3, r2
 800055e:	d806      	bhi.n	800056e <GetSector+0xa6>
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	4a2d      	ldr	r2, [pc, #180]	; (8000618 <GetSector+0x150>)
 8000564:	4293      	cmp	r3, r2
 8000566:	d902      	bls.n	800056e <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8000568:	2306      	movs	r3, #6
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	e035      	b.n	80005da <GetSector+0x112>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4a2a      	ldr	r2, [pc, #168]	; (800061c <GetSector+0x154>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d806      	bhi.n	8000584 <GetSector+0xbc>
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	4a29      	ldr	r2, [pc, #164]	; (8000620 <GetSector+0x158>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d902      	bls.n	8000584 <GetSector+0xbc>
  {
    sector = FLASH_SECTOR_7;
 800057e:	2307      	movs	r3, #7
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	e02a      	b.n	80005da <GetSector+0x112>
  }
  else if((Address < 0x0809FFFF) && (Address >= 0x08080000))
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4a27      	ldr	r2, [pc, #156]	; (8000624 <GetSector+0x15c>)
 8000588:	4293      	cmp	r3, r2
 800058a:	d806      	bhi.n	800059a <GetSector+0xd2>
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	4a26      	ldr	r2, [pc, #152]	; (8000628 <GetSector+0x160>)
 8000590:	4293      	cmp	r3, r2
 8000592:	d902      	bls.n	800059a <GetSector+0xd2>
  {
    sector = FLASH_SECTOR_8;
 8000594:	2308      	movs	r3, #8
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	e01f      	b.n	80005da <GetSector+0x112>
  }
  else if((Address < 0x080BFFFF) && (Address >= 0x080A0000))
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4a23      	ldr	r2, [pc, #140]	; (800062c <GetSector+0x164>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d806      	bhi.n	80005b0 <GetSector+0xe8>
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4a22      	ldr	r2, [pc, #136]	; (8000630 <GetSector+0x168>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d902      	bls.n	80005b0 <GetSector+0xe8>
  {
    sector = FLASH_SECTOR_9;
 80005aa:	2309      	movs	r3, #9
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	e014      	b.n	80005da <GetSector+0x112>
  }
  else if((Address < 0x080DFFFF) && (Address >= 0x080C0000))
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	4a20      	ldr	r2, [pc, #128]	; (8000634 <GetSector+0x16c>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d806      	bhi.n	80005c6 <GetSector+0xfe>
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4a1f      	ldr	r2, [pc, #124]	; (8000638 <GetSector+0x170>)
 80005bc:	4293      	cmp	r3, r2
 80005be:	d902      	bls.n	80005c6 <GetSector+0xfe>
  {
    sector = FLASH_SECTOR_10;
 80005c0:	230a      	movs	r3, #10
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	e009      	b.n	80005da <GetSector+0x112>
  }
  else if((Address < 0x080FFFFF) && (Address >= 0x080E0000))
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4a1c      	ldr	r2, [pc, #112]	; (800063c <GetSector+0x174>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d805      	bhi.n	80005da <GetSector+0x112>
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4a1b      	ldr	r2, [pc, #108]	; (8000640 <GetSector+0x178>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d901      	bls.n	80005da <GetSector+0x112>
  {
    sector = FLASH_SECTOR_11;
 80005d6:	230b      	movs	r3, #11
 80005d8:	60fb      	str	r3, [r7, #12]
  }
  else if (Address < 0x081FFFFF) && (Address >= 0x081E0000)
  {
    sector = FLASH_SECTOR_23;
  }*/
  return sector;
 80005da:	68fb      	ldr	r3, [r7, #12]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3714      	adds	r7, #20
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	08003ffe 	.word	0x08003ffe
 80005ec:	08007ffe 	.word	0x08007ffe
 80005f0:	08003fff 	.word	0x08003fff
 80005f4:	0800bffe 	.word	0x0800bffe
 80005f8:	08007fff 	.word	0x08007fff
 80005fc:	0800fffe 	.word	0x0800fffe
 8000600:	0800bfff 	.word	0x0800bfff
 8000604:	0801fffe 	.word	0x0801fffe
 8000608:	0800ffff 	.word	0x0800ffff
 800060c:	0803fffe 	.word	0x0803fffe
 8000610:	0801ffff 	.word	0x0801ffff
 8000614:	0805fffe 	.word	0x0805fffe
 8000618:	0803ffff 	.word	0x0803ffff
 800061c:	0807fffe 	.word	0x0807fffe
 8000620:	0805ffff 	.word	0x0805ffff
 8000624:	0809fffe 	.word	0x0809fffe
 8000628:	0807ffff 	.word	0x0807ffff
 800062c:	080bfffe 	.word	0x080bfffe
 8000630:	0809ffff 	.word	0x0809ffff
 8000634:	080dfffe 	.word	0x080dfffe
 8000638:	080bffff 	.word	0x080bffff
 800063c:	080ffffe 	.word	0x080ffffe
 8000640:	080dffff 	.word	0x080dffff

08000644 <MY_FLASH_SetSectorAddrs>:
	HAL_FLASH_Lock();
}

//2. Set Sector Adress
void MY_FLASH_SetSectorAddrs(uint8_t sector, uint32_t addrs)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	6039      	str	r1, [r7, #0]
 800064e:	71fb      	strb	r3, [r7, #7]
	MY_SectorNum = sector;
 8000650:	4a05      	ldr	r2, [pc, #20]	; (8000668 <MY_FLASH_SetSectorAddrs+0x24>)
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	7013      	strb	r3, [r2, #0]
	MY_SectorAddrs = addrs;
 8000656:	4a05      	ldr	r2, [pc, #20]	; (800066c <MY_FLASH_SetSectorAddrs+0x28>)
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	6013      	str	r3, [r2, #0]
}
 800065c:	bf00      	nop
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	20000048 	.word	0x20000048
 800066c:	20000044 	.word	0x20000044

08000670 <MY_FLASH_WriteN>:

//3. Write Flash
void MY_FLASH_WriteN(uint32_t idx, void *wrBuf, uint32_t Nsize, DataTypeDef dataType)
{
 8000670:	b590      	push	{r4, r7, lr}
 8000672:	b08d      	sub	sp, #52	; 0x34
 8000674:	af00      	add	r7, sp, #0
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	60b9      	str	r1, [r7, #8]
 800067a:	607a      	str	r2, [r7, #4]
 800067c:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = MY_SectorAddrs + idx;
 800067e:	4b48      	ldr	r3, [pc, #288]	; (80007a0 <MY_FLASH_WriteN+0x130>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	68fa      	ldr	r2, [r7, #12]
 8000684:	4413      	add	r3, r2
 8000686:	62fb      	str	r3, [r7, #44]	; 0x2c

	//Erase sector before write
	  static FLASH_EraseInitTypeDef EraseInitStruct;
	  uint32_t SECTORError;
	  uint32_t StartSector = GetSector(MY_SectorAddrs);
 8000688:	4b45      	ldr	r3, [pc, #276]	; (80007a0 <MY_FLASH_WriteN+0x130>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ff1b 	bl	80004c8 <GetSector>
 8000692:	61f8      	str	r0, [r7, #28]
	  uint32_t EndSectorAddress = MY_SectorAddrs + Nsize*4;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	009a      	lsls	r2, r3, #2
 8000698:	4b41      	ldr	r3, [pc, #260]	; (80007a0 <MY_FLASH_WriteN+0x130>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4413      	add	r3, r2
 800069e:	61bb      	str	r3, [r7, #24]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 80006a0:	69b8      	ldr	r0, [r7, #24]
 80006a2:	f7ff ff11 	bl	80004c8 <GetSector>
 80006a6:	6178      	str	r0, [r7, #20]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80006a8:	4b3e      	ldr	r3, [pc, #248]	; (80007a4 <MY_FLASH_WriteN+0x134>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80006ae:	4b3d      	ldr	r3, [pc, #244]	; (80007a4 <MY_FLASH_WriteN+0x134>)
 80006b0:	2202      	movs	r2, #2
 80006b2:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 80006b4:	4a3b      	ldr	r2, [pc, #236]	; (80007a4 <MY_FLASH_WriteN+0x134>)
 80006b6:	69fb      	ldr	r3, [r7, #28]
 80006b8:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 80006ba:	697a      	ldr	r2, [r7, #20]
 80006bc:	69fb      	ldr	r3, [r7, #28]
 80006be:	1ad3      	subs	r3, r2, r3
 80006c0:	3301      	adds	r3, #1
 80006c2:	4a38      	ldr	r2, [pc, #224]	; (80007a4 <MY_FLASH_WriteN+0x134>)
 80006c4:	60d3      	str	r3, [r2, #12]

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
		 you have to make sure that these data are rewritten before they are accessed during code
		 execution. If this cannot be done safely, it is recommended to flush the caches by setting the
		 DCRST and ICRST bits in the FLASH_CR register. */
	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 80006c6:	f107 0310 	add.w	r3, r7, #16
 80006ca:	4619      	mov	r1, r3
 80006cc:	4835      	ldr	r0, [pc, #212]	; (80007a4 <MY_FLASH_WriteN+0x134>)
 80006ce:	f000 fd29 	bl	8001124 <HAL_FLASHEx_Erase>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d002      	beq.n	80006de <MY_FLASH_WriteN+0x6e>
	  {
		  return HAL_FLASH_GetError ();
 80006d8:	f000 fbea 	bl	8000eb0 <HAL_FLASH_GetError>
 80006dc:	e05c      	b.n	8000798 <MY_FLASH_WriteN+0x128>
	  }

//	MY_FLASH_EraseSector();

	//Unlock Flash
	HAL_FLASH_Unlock();
 80006de:	f000 fbb5 	bl	8000e4c <HAL_FLASH_Unlock>
	//Write to Flash
	switch(dataType)
 80006e2:	78fb      	ldrb	r3, [r7, #3]
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d01e      	beq.n	8000726 <MY_FLASH_WriteN+0xb6>
 80006e8:	2b02      	cmp	r3, #2
 80006ea:	d038      	beq.n	800075e <MY_FLASH_WriteN+0xee>
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d151      	bne.n	8000794 <MY_FLASH_WriteN+0x124>
	{
		case DATA_TYPE_8:
				for(uint32_t i=0; i<Nsize; i++)
 80006f0:	2300      	movs	r3, #0
 80006f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80006f4:	e012      	b.n	800071c <MY_FLASH_WriteN+0xac>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flashAddress , ((uint8_t *)wrBuf)[i]);
 80006f6:	68ba      	ldr	r2, [r7, #8]
 80006f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006fa:	4413      	add	r3, r2
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	f04f 0400 	mov.w	r4, #0
 8000704:	461a      	mov	r2, r3
 8000706:	4623      	mov	r3, r4
 8000708:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800070a:	2000      	movs	r0, #0
 800070c:	f000 fb4a 	bl	8000da4 <HAL_FLASH_Program>
					flashAddress++;
 8000710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000712:	3301      	adds	r3, #1
 8000714:	62fb      	str	r3, [r7, #44]	; 0x2c
				for(uint32_t i=0; i<Nsize; i++)
 8000716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000718:	3301      	adds	r3, #1
 800071a:	62bb      	str	r3, [r7, #40]	; 0x28
 800071c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	429a      	cmp	r2, r3
 8000722:	d3e8      	bcc.n	80006f6 <MY_FLASH_WriteN+0x86>
				}
			break;
 8000724:	e036      	b.n	8000794 <MY_FLASH_WriteN+0x124>

		case DATA_TYPE_16:
				for(uint32_t i=0; i<Nsize; i++)
 8000726:	2300      	movs	r3, #0
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
 800072a:	e013      	b.n	8000754 <MY_FLASH_WriteN+0xe4>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, flashAddress , ((uint16_t *)wrBuf)[i]);
 800072c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	68ba      	ldr	r2, [r7, #8]
 8000732:	4413      	add	r3, r2
 8000734:	881b      	ldrh	r3, [r3, #0]
 8000736:	b29b      	uxth	r3, r3
 8000738:	f04f 0400 	mov.w	r4, #0
 800073c:	461a      	mov	r2, r3
 800073e:	4623      	mov	r3, r4
 8000740:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000742:	2001      	movs	r0, #1
 8000744:	f000 fb2e 	bl	8000da4 <HAL_FLASH_Program>
					flashAddress+=2;
 8000748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800074a:	3302      	adds	r3, #2
 800074c:	62fb      	str	r3, [r7, #44]	; 0x2c
				for(uint32_t i=0; i<Nsize; i++)
 800074e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000750:	3301      	adds	r3, #1
 8000752:	627b      	str	r3, [r7, #36]	; 0x24
 8000754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	429a      	cmp	r2, r3
 800075a:	d3e7      	bcc.n	800072c <MY_FLASH_WriteN+0xbc>
				}
			break;
 800075c:	e01a      	b.n	8000794 <MY_FLASH_WriteN+0x124>

		case DATA_TYPE_32:
				for(uint32_t i=0; i<Nsize; i++)
 800075e:	2300      	movs	r3, #0
 8000760:	623b      	str	r3, [r7, #32]
 8000762:	e012      	b.n	800078a <MY_FLASH_WriteN+0x11a>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddress , ((uint32_t *)wrBuf)[i]);
 8000764:	6a3b      	ldr	r3, [r7, #32]
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	68ba      	ldr	r2, [r7, #8]
 800076a:	4413      	add	r3, r2
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f04f 0400 	mov.w	r4, #0
 8000772:	461a      	mov	r2, r3
 8000774:	4623      	mov	r3, r4
 8000776:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000778:	2002      	movs	r0, #2
 800077a:	f000 fb13 	bl	8000da4 <HAL_FLASH_Program>
					flashAddress+=4;
 800077e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000780:	3304      	adds	r3, #4
 8000782:	62fb      	str	r3, [r7, #44]	; 0x2c
				for(uint32_t i=0; i<Nsize; i++)
 8000784:	6a3b      	ldr	r3, [r7, #32]
 8000786:	3301      	adds	r3, #1
 8000788:	623b      	str	r3, [r7, #32]
 800078a:	6a3a      	ldr	r2, [r7, #32]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	429a      	cmp	r2, r3
 8000790:	d3e8      	bcc.n	8000764 <MY_FLASH_WriteN+0xf4>
				}
			break;
 8000792:	bf00      	nop
	}
	//Lock the Flash space
	HAL_FLASH_Lock();
 8000794:	f000 fb7c 	bl	8000e90 <HAL_FLASH_Lock>
}
 8000798:	3734      	adds	r7, #52	; 0x34
 800079a:	46bd      	mov	sp, r7
 800079c:	bd90      	pop	{r4, r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000044 	.word	0x20000044
 80007a4:	2000004c 	.word	0x2000004c

080007a8 <MY_FLASH_ReadN>:
//4. Read Flash
void MY_FLASH_ReadN(uint32_t idx, void *rdBuf, uint32_t Nsize, DataTypeDef dataType)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b089      	sub	sp, #36	; 0x24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	60f8      	str	r0, [r7, #12]
 80007b0:	60b9      	str	r1, [r7, #8]
 80007b2:	607a      	str	r2, [r7, #4]
 80007b4:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = MY_SectorAddrs + idx;
 80007b6:	4b28      	ldr	r3, [pc, #160]	; (8000858 <MY_FLASH_ReadN+0xb0>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	68fa      	ldr	r2, [r7, #12]
 80007bc:	4413      	add	r3, r2
 80007be:	61fb      	str	r3, [r7, #28]

	switch(dataType)
 80007c0:	78fb      	ldrb	r3, [r7, #3]
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d018      	beq.n	80007f8 <MY_FLASH_ReadN+0x50>
 80007c6:	2b02      	cmp	r3, #2
 80007c8:	d02b      	beq.n	8000822 <MY_FLASH_ReadN+0x7a>
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d000      	beq.n	80007d0 <MY_FLASH_ReadN+0x28>
					*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
					flashAddress+=4;
				}
			break;
	}
}
 80007ce:	e03d      	b.n	800084c <MY_FLASH_ReadN+0xa4>
				for(uint32_t i=0; i<Nsize; i++)
 80007d0:	2300      	movs	r3, #0
 80007d2:	61bb      	str	r3, [r7, #24]
 80007d4:	e00b      	b.n	80007ee <MY_FLASH_ReadN+0x46>
					*((uint8_t *)rdBuf + i) = *(uint8_t *)flashAddress;
 80007d6:	69fa      	ldr	r2, [r7, #28]
 80007d8:	68b9      	ldr	r1, [r7, #8]
 80007da:	69bb      	ldr	r3, [r7, #24]
 80007dc:	440b      	add	r3, r1
 80007de:	7812      	ldrb	r2, [r2, #0]
 80007e0:	701a      	strb	r2, [r3, #0]
					flashAddress++;
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	3301      	adds	r3, #1
 80007e6:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 80007e8:	69bb      	ldr	r3, [r7, #24]
 80007ea:	3301      	adds	r3, #1
 80007ec:	61bb      	str	r3, [r7, #24]
 80007ee:	69ba      	ldr	r2, [r7, #24]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d3ef      	bcc.n	80007d6 <MY_FLASH_ReadN+0x2e>
			break;
 80007f6:	e029      	b.n	800084c <MY_FLASH_ReadN+0xa4>
				for(uint32_t i=0; i<Nsize; i++)
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	e00c      	b.n	8000818 <MY_FLASH_ReadN+0x70>
					*((uint16_t *)rdBuf + i) = *(uint16_t *)flashAddress;
 80007fe:	69fa      	ldr	r2, [r7, #28]
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	68b9      	ldr	r1, [r7, #8]
 8000806:	440b      	add	r3, r1
 8000808:	8812      	ldrh	r2, [r2, #0]
 800080a:	801a      	strh	r2, [r3, #0]
					flashAddress+=2;
 800080c:	69fb      	ldr	r3, [r7, #28]
 800080e:	3302      	adds	r3, #2
 8000810:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	3301      	adds	r3, #1
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	697a      	ldr	r2, [r7, #20]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	429a      	cmp	r2, r3
 800081e:	d3ee      	bcc.n	80007fe <MY_FLASH_ReadN+0x56>
			break;
 8000820:	e014      	b.n	800084c <MY_FLASH_ReadN+0xa4>
				for(uint32_t i=0; i<Nsize; i++)
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
 8000826:	e00c      	b.n	8000842 <MY_FLASH_ReadN+0x9a>
					*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
 8000828:	69fa      	ldr	r2, [r7, #28]
 800082a:	693b      	ldr	r3, [r7, #16]
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	68b9      	ldr	r1, [r7, #8]
 8000830:	440b      	add	r3, r1
 8000832:	6812      	ldr	r2, [r2, #0]
 8000834:	601a      	str	r2, [r3, #0]
					flashAddress+=4;
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	3304      	adds	r3, #4
 800083a:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	3301      	adds	r3, #1
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	693a      	ldr	r2, [r7, #16]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	429a      	cmp	r2, r3
 8000848:	d3ee      	bcc.n	8000828 <MY_FLASH_ReadN+0x80>
			break;
 800084a:	bf00      	nop
}
 800084c:	bf00      	nop
 800084e:	3724      	adds	r7, #36	; 0x24
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	20000044 	.word	0x20000044

0800085c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000860:	f000 f948 	bl	8000af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000864:	f000 f81a 	bl	800089c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000868:	f000 f882 	bl	8000970 <MX_GPIO_Init>
//  Flash_Write_NUM(0x0800D100, val);
//  RxVal = Flash_Read_NUM(0x0800D100);

  /* USER CODE END 2 */
////  int numofwords = (strlen(data)/4)+((strlen(data)%4)!=0);
  MY_FLASH_SetSectorAddrs(5, 0x08020000); // Sector 11 Addr.
 800086c:	4908      	ldr	r1, [pc, #32]	; (8000890 <main+0x34>)
 800086e:	2005      	movs	r0, #5
 8000870:	f7ff fee8 	bl	8000644 <MY_FLASH_SetSectorAddrs>
  MY_FLASH_WriteN(0,(uint8_t *)data1,sizeof(data1),DATA_TYPE_8);
 8000874:	2300      	movs	r3, #0
 8000876:	221c      	movs	r2, #28
 8000878:	4906      	ldr	r1, [pc, #24]	; (8000894 <main+0x38>)
 800087a:	2000      	movs	r0, #0
 800087c:	f7ff fef8 	bl	8000670 <MY_FLASH_WriteN>
  MY_FLASH_ReadN(0x00000000,Rx_Data,sizeof(data1),DATA_TYPE_8);
 8000880:	2300      	movs	r3, #0
 8000882:	221c      	movs	r2, #28
 8000884:	4904      	ldr	r1, [pc, #16]	; (8000898 <main+0x3c>)
 8000886:	2000      	movs	r0, #0
 8000888:	f7ff ff8e 	bl	80007a8 <MY_FLASH_ReadN>
//   MY_FLASH_WriteN(0x00004000,(uint32_t *)data1,numofwords1,2);
//   MY_FLASH_ReadN(0x00004000,Rx_Data,numofwords1,2);
  // Sector 11 Addr.
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800088c:	e7fe      	b.n	800088c <main+0x30>
 800088e:	bf00      	nop
 8000890:	08020000 	.word	0x08020000
 8000894:	20000000 	.word	0x20000000
 8000898:	200000c4 	.word	0x200000c4

0800089c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b094      	sub	sp, #80	; 0x50
 80008a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a2:	f107 0320 	add.w	r3, r7, #32
 80008a6:	2230      	movs	r2, #48	; 0x30
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f002 ff58 	bl	8003760 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c0:	2300      	movs	r3, #0
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	4b28      	ldr	r3, [pc, #160]	; (8000968 <SystemClock_Config+0xcc>)
 80008c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c8:	4a27      	ldr	r2, [pc, #156]	; (8000968 <SystemClock_Config+0xcc>)
 80008ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ce:	6413      	str	r3, [r2, #64]	; 0x40
 80008d0:	4b25      	ldr	r3, [pc, #148]	; (8000968 <SystemClock_Config+0xcc>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008dc:	2300      	movs	r3, #0
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	4b22      	ldr	r3, [pc, #136]	; (800096c <SystemClock_Config+0xd0>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a21      	ldr	r2, [pc, #132]	; (800096c <SystemClock_Config+0xd0>)
 80008e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ea:	6013      	str	r3, [r2, #0]
 80008ec:	4b1f      	ldr	r3, [pc, #124]	; (800096c <SystemClock_Config+0xd0>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008f8:	2301      	movs	r3, #1
 80008fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000902:	2302      	movs	r3, #2
 8000904:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000906:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800090a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800090c:	2304      	movs	r3, #4
 800090e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000910:	23b4      	movs	r3, #180	; 0xb4
 8000912:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000914:	2302      	movs	r3, #2
 8000916:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000918:	2302      	movs	r3, #2
 800091a:	64fb      	str	r3, [r7, #76]	; 0x4c
 // RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091c:	f107 0320 	add.w	r3, r7, #32
 8000920:	4618      	mov	r0, r3
 8000922:	f001 ff0d 	bl	8002740 <HAL_RCC_OscConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800092c:	f000 f83a 	bl	80009a4 <Error_Handler>
//  {
//    Error_Handler();
//  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000930:	230f      	movs	r3, #15
 8000932:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000934:	2302      	movs	r3, #2
 8000936:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800093c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000940:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000946:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	2105      	movs	r1, #5
 800094e:	4618      	mov	r0, r3
 8000950:	f002 f966 	bl	8002c20 <HAL_RCC_ClockConfig>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800095a:	f000 f823 	bl	80009a4 <Error_Handler>
  }
}
 800095e:	bf00      	nop
 8000960:	3750      	adds	r7, #80	; 0x50
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800
 800096c:	40007000 	.word	0x40007000

08000970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_GPIO_Init+0x30>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a08      	ldr	r2, [pc, #32]	; (80009a0 <MX_GPIO_Init+0x30>)
 8000980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_GPIO_Init+0x30>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]

}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800

080009a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
	...

080009b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <HAL_MspInit+0x4c>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	4a0f      	ldr	r2, [pc, #60]	; (8000a00 <HAL_MspInit+0x4c>)
 80009c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ca:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <HAL_MspInit+0x4c>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	603b      	str	r3, [r7, #0]
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <HAL_MspInit+0x4c>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	4a08      	ldr	r2, [pc, #32]	; (8000a00 <HAL_MspInit+0x4c>)
 80009e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e4:	6413      	str	r3, [r2, #64]	; 0x40
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <HAL_MspInit+0x4c>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009f2:	2007      	movs	r0, #7
 80009f4:	f000 f9a2 	bl	8000d3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f8:	bf00      	nop
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40023800 	.word	0x40023800

08000a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <HardFault_Handler+0x4>

08000a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <MemManage_Handler+0x4>

08000a1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <BusFault_Handler+0x4>

08000a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <UsageFault_Handler+0x4>

08000a2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a58:	f000 f89e 	bl	8000b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000a64:	4802      	ldr	r0, [pc, #8]	; (8000a70 <OTG_FS_IRQHandler+0x10>)
 8000a66:	f000 fc7f 	bl	8001368 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000150 	.word	0x20000150

08000a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <SystemInit+0x28>)
 8000a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7e:	4a07      	ldr	r2, [pc, #28]	; (8000a9c <SystemInit+0x28>)
 8000a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a88:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <SystemInit+0x28>)
 8000a8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a8e:	609a      	str	r2, [r3, #8]
#endif
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000aa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ad8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000aa4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000aa6:	e003      	b.n	8000ab0 <LoopCopyDataInit>

08000aa8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000aaa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000aac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000aae:	3104      	adds	r1, #4

08000ab0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ab0:	480b      	ldr	r0, [pc, #44]	; (8000ae0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ab4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ab6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ab8:	d3f6      	bcc.n	8000aa8 <CopyDataInit>
  ldr  r2, =_sbss
 8000aba:	4a0b      	ldr	r2, [pc, #44]	; (8000ae8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000abc:	e002      	b.n	8000ac4 <LoopFillZerobss>

08000abe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000abe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ac0:	f842 3b04 	str.w	r3, [r2], #4

08000ac4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ac4:	4b09      	ldr	r3, [pc, #36]	; (8000aec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ac6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ac8:	d3f9      	bcc.n	8000abe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000aca:	f7ff ffd3 	bl	8000a74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ace:	f002 fe23 	bl	8003718 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ad2:	f7ff fec3 	bl	800085c <main>
  bx  lr    
 8000ad6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ad8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000adc:	080037a8 	.word	0x080037a8
  ldr  r0, =_sdata
 8000ae0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ae4:	20000028 	.word	0x20000028
  ldr  r2, =_sbss
 8000ae8:	20000028 	.word	0x20000028
  ldr  r3, = _ebss
 8000aec:	20000414 	.word	0x20000414

08000af0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af0:	e7fe      	b.n	8000af0 <ADC_IRQHandler>
	...

08000af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000af8:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <HAL_Init+0x40>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a0d      	ldr	r2, [pc, #52]	; (8000b34 <HAL_Init+0x40>)
 8000afe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b04:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <HAL_Init+0x40>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <HAL_Init+0x40>)
 8000b0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <HAL_Init+0x40>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a07      	ldr	r2, [pc, #28]	; (8000b34 <HAL_Init+0x40>)
 8000b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b1c:	2003      	movs	r0, #3
 8000b1e:	f000 f90d 	bl	8000d3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b22:	2000      	movs	r0, #0
 8000b24:	f000 f808 	bl	8000b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b28:	f7ff ff44 	bl	80009b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40023c00 	.word	0x40023c00

08000b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <HAL_InitTick+0x54>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <HAL_InitTick+0x58>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b56:	4618      	mov	r0, r3
 8000b58:	f000 f917 	bl	8000d8a <HAL_SYSTICK_Config>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	e00e      	b.n	8000b84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b0f      	cmp	r3, #15
 8000b6a:	d80a      	bhi.n	8000b82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	f000 f8ed 	bl	8000d52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b78:	4a06      	ldr	r2, [pc, #24]	; (8000b94 <HAL_InitTick+0x5c>)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	e000      	b.n	8000b84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	2000001c 	.word	0x2000001c
 8000b90:	20000024 	.word	0x20000024
 8000b94:	20000020 	.word	0x20000020

08000b98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_IncTick+0x20>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_IncTick+0x24>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <HAL_IncTick+0x24>)
 8000baa:	6013      	str	r3, [r2, #0]
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	20000024 	.word	0x20000024
 8000bbc:	2000012c 	.word	0x2000012c

08000bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc4:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <HAL_GetTick+0x14>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	2000012c 	.word	0x2000012c

08000bd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be8:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <__NVIC_SetPriorityGrouping+0x44>)
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bee:	68ba      	ldr	r2, [r7, #8]
 8000bf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c0a:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <__NVIC_SetPriorityGrouping+0x44>)
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	60d3      	str	r3, [r2, #12]
}
 8000c10:	bf00      	nop
 8000c12:	3714      	adds	r7, #20
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c24:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <__NVIC_GetPriorityGrouping+0x18>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	0a1b      	lsrs	r3, r3, #8
 8000c2a:	f003 0307 	and.w	r3, r3, #7
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	6039      	str	r1, [r7, #0]
 8000c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	db0a      	blt.n	8000c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	490c      	ldr	r1, [pc, #48]	; (8000c88 <__NVIC_SetPriority+0x4c>)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	0112      	lsls	r2, r2, #4
 8000c5c:	b2d2      	uxtb	r2, r2
 8000c5e:	440b      	add	r3, r1
 8000c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c64:	e00a      	b.n	8000c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	4908      	ldr	r1, [pc, #32]	; (8000c8c <__NVIC_SetPriority+0x50>)
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	f003 030f 	and.w	r3, r3, #15
 8000c72:	3b04      	subs	r3, #4
 8000c74:	0112      	lsls	r2, r2, #4
 8000c76:	b2d2      	uxtb	r2, r2
 8000c78:	440b      	add	r3, r1
 8000c7a:	761a      	strb	r2, [r3, #24]
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000e100 	.word	0xe000e100
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b089      	sub	sp, #36	; 0x24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	f1c3 0307 	rsb	r3, r3, #7
 8000caa:	2b04      	cmp	r3, #4
 8000cac:	bf28      	it	cs
 8000cae:	2304      	movcs	r3, #4
 8000cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	3304      	adds	r3, #4
 8000cb6:	2b06      	cmp	r3, #6
 8000cb8:	d902      	bls.n	8000cc0 <NVIC_EncodePriority+0x30>
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	3b03      	subs	r3, #3
 8000cbe:	e000      	b.n	8000cc2 <NVIC_EncodePriority+0x32>
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	43da      	mvns	r2, r3
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	401a      	ands	r2, r3
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce2:	43d9      	mvns	r1, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce8:	4313      	orrs	r3, r2
         );
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3724      	adds	r7, #36	; 0x24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
	...

08000cf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d08:	d301      	bcc.n	8000d0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e00f      	b.n	8000d2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d0e:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <SysTick_Config+0x40>)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d16:	210f      	movs	r1, #15
 8000d18:	f04f 30ff 	mov.w	r0, #4294967295
 8000d1c:	f7ff ff8e 	bl	8000c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d20:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <SysTick_Config+0x40>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d26:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <SysTick_Config+0x40>)
 8000d28:	2207      	movs	r2, #7
 8000d2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	e000e010 	.word	0xe000e010

08000d3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff ff47 	bl	8000bd8 <__NVIC_SetPriorityGrouping>
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b086      	sub	sp, #24
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	4603      	mov	r3, r0
 8000d5a:	60b9      	str	r1, [r7, #8]
 8000d5c:	607a      	str	r2, [r7, #4]
 8000d5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d64:	f7ff ff5c 	bl	8000c20 <__NVIC_GetPriorityGrouping>
 8000d68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	68b9      	ldr	r1, [r7, #8]
 8000d6e:	6978      	ldr	r0, [r7, #20]
 8000d70:	f7ff ff8e 	bl	8000c90 <NVIC_EncodePriority>
 8000d74:	4602      	mov	r2, r0
 8000d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ff5d 	bl	8000c3c <__NVIC_SetPriority>
}
 8000d82:	bf00      	nop
 8000d84:	3718      	adds	r7, #24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff ffb0 	bl	8000cf8 <SysTick_Config>
 8000d98:	4603      	mov	r3, r0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
	...

08000da4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000db6:	4b23      	ldr	r3, [pc, #140]	; (8000e44 <HAL_FLASH_Program+0xa0>)
 8000db8:	7e1b      	ldrb	r3, [r3, #24]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d101      	bne.n	8000dc2 <HAL_FLASH_Program+0x1e>
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	e03b      	b.n	8000e3a <HAL_FLASH_Program+0x96>
 8000dc2:	4b20      	ldr	r3, [pc, #128]	; (8000e44 <HAL_FLASH_Program+0xa0>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000dc8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000dcc:	f000 f87c 	bl	8000ec8 <FLASH_WaitForLastOperation>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8000dd4:	7dfb      	ldrb	r3, [r7, #23]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d12b      	bne.n	8000e32 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d105      	bne.n	8000dec <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8000de0:	783b      	ldrb	r3, [r7, #0]
 8000de2:	4619      	mov	r1, r3
 8000de4:	68b8      	ldr	r0, [r7, #8]
 8000de6:	f000 f925 	bl	8001034 <FLASH_Program_Byte>
 8000dea:	e016      	b.n	8000e1a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d105      	bne.n	8000dfe <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000df2:	883b      	ldrh	r3, [r7, #0]
 8000df4:	4619      	mov	r1, r3
 8000df6:	68b8      	ldr	r0, [r7, #8]
 8000df8:	f000 f8f8 	bl	8000fec <FLASH_Program_HalfWord>
 8000dfc:	e00d      	b.n	8000e1a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d105      	bne.n	8000e10 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	4619      	mov	r1, r3
 8000e08:	68b8      	ldr	r0, [r7, #8]
 8000e0a:	f000 f8cd 	bl	8000fa8 <FLASH_Program_Word>
 8000e0e:	e004      	b.n	8000e1a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8000e10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e14:	68b8      	ldr	r0, [r7, #8]
 8000e16:	f000 f897 	bl	8000f48 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e1a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e1e:	f000 f853 	bl	8000ec8 <FLASH_WaitForLastOperation>
 8000e22:	4603      	mov	r3, r0
 8000e24:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8000e26:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <HAL_FLASH_Program+0xa4>)
 8000e28:	691b      	ldr	r3, [r3, #16]
 8000e2a:	4a07      	ldr	r2, [pc, #28]	; (8000e48 <HAL_FLASH_Program+0xa4>)
 8000e2c:	f023 0301 	bic.w	r3, r3, #1
 8000e30:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000e32:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <HAL_FLASH_Program+0xa0>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	761a      	strb	r2, [r3, #24]
  
  return status;
 8000e38:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3718      	adds	r7, #24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000130 	.word	0x20000130
 8000e48:	40023c00 	.word	0x40023c00

08000e4c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000e52:	2300      	movs	r3, #0
 8000e54:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <HAL_FLASH_Unlock+0x38>)
 8000e58:	691b      	ldr	r3, [r3, #16]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	da0b      	bge.n	8000e76 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <HAL_FLASH_Unlock+0x38>)
 8000e60:	4a09      	ldr	r2, [pc, #36]	; (8000e88 <HAL_FLASH_Unlock+0x3c>)
 8000e62:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000e64:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <HAL_FLASH_Unlock+0x38>)
 8000e66:	4a09      	ldr	r2, [pc, #36]	; (8000e8c <HAL_FLASH_Unlock+0x40>)
 8000e68:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_FLASH_Unlock+0x38>)
 8000e6c:	691b      	ldr	r3, [r3, #16]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	da01      	bge.n	8000e76 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000e76:	79fb      	ldrb	r3, [r7, #7]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	40023c00 	.word	0x40023c00
 8000e88:	45670123 	.word	0x45670123
 8000e8c:	cdef89ab 	.word	0xcdef89ab

08000e90 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8000e94:	4b05      	ldr	r3, [pc, #20]	; (8000eac <HAL_FLASH_Lock+0x1c>)
 8000e96:	691b      	ldr	r3, [r3, #16]
 8000e98:	4a04      	ldr	r2, [pc, #16]	; (8000eac <HAL_FLASH_Lock+0x1c>)
 8000e9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e9e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	40023c00 	.word	0x40023c00

08000eb0 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8000eb4:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <HAL_FLASH_GetError+0x14>)
 8000eb6:	69db      	ldr	r3, [r3, #28]
}  
 8000eb8:	4618      	mov	r0, r3
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20000130 	.word	0x20000130

08000ec8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ed4:	4b1a      	ldr	r3, [pc, #104]	; (8000f40 <FLASH_WaitForLastOperation+0x78>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8000eda:	f7ff fe71 	bl	8000bc0 <HAL_GetTick>
 8000ede:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000ee0:	e010      	b.n	8000f04 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee8:	d00c      	beq.n	8000f04 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d007      	beq.n	8000f00 <FLASH_WaitForLastOperation+0x38>
 8000ef0:	f7ff fe66 	bl	8000bc0 <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d201      	bcs.n	8000f04 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8000f00:	2303      	movs	r3, #3
 8000f02:	e019      	b.n	8000f38 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000f04:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <FLASH_WaitForLastOperation+0x7c>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d1e8      	bne.n	8000ee2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8000f10:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <FLASH_WaitForLastOperation+0x7c>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d002      	beq.n	8000f22 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000f1c:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <FLASH_WaitForLastOperation+0x7c>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8000f22:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <FLASH_WaitForLastOperation+0x7c>)
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000f2e:	f000 f8a3 	bl	8001078 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e000      	b.n	8000f38 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8000f36:	2300      	movs	r3, #0
  
}  
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000130 	.word	0x20000130
 8000f44:	40023c00 	.word	0x40023c00

08000f48 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8000f48:	b490      	push	{r4, r7}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000f54:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <FLASH_Program_DoubleWord+0x5c>)
 8000f56:	691b      	ldr	r3, [r3, #16]
 8000f58:	4a12      	ldr	r2, [pc, #72]	; (8000fa4 <FLASH_Program_DoubleWord+0x5c>)
 8000f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8000f60:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <FLASH_Program_DoubleWord+0x5c>)
 8000f62:	691b      	ldr	r3, [r3, #16]
 8000f64:	4a0f      	ldr	r2, [pc, #60]	; (8000fa4 <FLASH_Program_DoubleWord+0x5c>)
 8000f66:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000f6a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000f6c:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <FLASH_Program_DoubleWord+0x5c>)
 8000f6e:	691b      	ldr	r3, [r3, #16]
 8000f70:	4a0c      	ldr	r2, [pc, #48]	; (8000fa4 <FLASH_Program_DoubleWord+0x5c>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	683a      	ldr	r2, [r7, #0]
 8000f7c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000f7e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8000f82:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000f86:	f04f 0300 	mov.w	r3, #0
 8000f8a:	f04f 0400 	mov.w	r4, #0
 8000f8e:	0013      	movs	r3, r2
 8000f90:	2400      	movs	r4, #0
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	3204      	adds	r2, #4
 8000f96:	6013      	str	r3, [r2, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc90      	pop	{r4, r7}
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	40023c00 	.word	0x40023c00

08000fa8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <FLASH_Program_Word+0x40>)
 8000fb4:	691b      	ldr	r3, [r3, #16]
 8000fb6:	4a0c      	ldr	r2, [pc, #48]	; (8000fe8 <FLASH_Program_Word+0x40>)
 8000fb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000fbc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <FLASH_Program_Word+0x40>)
 8000fc0:	691b      	ldr	r3, [r3, #16]
 8000fc2:	4a09      	ldr	r2, [pc, #36]	; (8000fe8 <FLASH_Program_Word+0x40>)
 8000fc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fc8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000fca:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <FLASH_Program_Word+0x40>)
 8000fcc:	691b      	ldr	r3, [r3, #16]
 8000fce:	4a06      	ldr	r2, [pc, #24]	; (8000fe8 <FLASH_Program_Word+0x40>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	683a      	ldr	r2, [r7, #0]
 8000fda:	601a      	str	r2, [r3, #0]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	40023c00 	.word	0x40023c00

08000fec <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000ff8:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <FLASH_Program_HalfWord+0x44>)
 8000ffa:	691b      	ldr	r3, [r3, #16]
 8000ffc:	4a0c      	ldr	r2, [pc, #48]	; (8001030 <FLASH_Program_HalfWord+0x44>)
 8000ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001002:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001004:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <FLASH_Program_HalfWord+0x44>)
 8001006:	691b      	ldr	r3, [r3, #16]
 8001008:	4a09      	ldr	r2, [pc, #36]	; (8001030 <FLASH_Program_HalfWord+0x44>)
 800100a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800100e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001010:	4b07      	ldr	r3, [pc, #28]	; (8001030 <FLASH_Program_HalfWord+0x44>)
 8001012:	691b      	ldr	r3, [r3, #16]
 8001014:	4a06      	ldr	r2, [pc, #24]	; (8001030 <FLASH_Program_HalfWord+0x44>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	887a      	ldrh	r2, [r7, #2]
 8001020:	801a      	strh	r2, [r3, #0]
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	40023c00 	.word	0x40023c00

08001034 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <FLASH_Program_Byte+0x40>)
 8001042:	691b      	ldr	r3, [r3, #16]
 8001044:	4a0b      	ldr	r2, [pc, #44]	; (8001074 <FLASH_Program_Byte+0x40>)
 8001046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800104a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800104c:	4b09      	ldr	r3, [pc, #36]	; (8001074 <FLASH_Program_Byte+0x40>)
 800104e:	4a09      	ldr	r2, [pc, #36]	; (8001074 <FLASH_Program_Byte+0x40>)
 8001050:	691b      	ldr	r3, [r3, #16]
 8001052:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001054:	4b07      	ldr	r3, [pc, #28]	; (8001074 <FLASH_Program_Byte+0x40>)
 8001056:	691b      	ldr	r3, [r3, #16]
 8001058:	4a06      	ldr	r2, [pc, #24]	; (8001074 <FLASH_Program_Byte+0x40>)
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	78fa      	ldrb	r2, [r7, #3]
 8001064:	701a      	strb	r2, [r3, #0]
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40023c00 	.word	0x40023c00

08001078 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800107c:	4b27      	ldr	r3, [pc, #156]	; (800111c <FLASH_SetErrorCode+0xa4>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	f003 0310 	and.w	r3, r3, #16
 8001084:	2b00      	cmp	r3, #0
 8001086:	d008      	beq.n	800109a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001088:	4b25      	ldr	r3, [pc, #148]	; (8001120 <FLASH_SetErrorCode+0xa8>)
 800108a:	69db      	ldr	r3, [r3, #28]
 800108c:	f043 0310 	orr.w	r3, r3, #16
 8001090:	4a23      	ldr	r2, [pc, #140]	; (8001120 <FLASH_SetErrorCode+0xa8>)
 8001092:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001094:	4b21      	ldr	r3, [pc, #132]	; (800111c <FLASH_SetErrorCode+0xa4>)
 8001096:	2210      	movs	r2, #16
 8001098:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800109a:	4b20      	ldr	r3, [pc, #128]	; (800111c <FLASH_SetErrorCode+0xa4>)
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	f003 0320 	and.w	r3, r3, #32
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d008      	beq.n	80010b8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80010a6:	4b1e      	ldr	r3, [pc, #120]	; (8001120 <FLASH_SetErrorCode+0xa8>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	f043 0308 	orr.w	r3, r3, #8
 80010ae:	4a1c      	ldr	r2, [pc, #112]	; (8001120 <FLASH_SetErrorCode+0xa8>)
 80010b0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80010b2:	4b1a      	ldr	r3, [pc, #104]	; (800111c <FLASH_SetErrorCode+0xa4>)
 80010b4:	2220      	movs	r2, #32
 80010b6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80010b8:	4b18      	ldr	r3, [pc, #96]	; (800111c <FLASH_SetErrorCode+0xa4>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d008      	beq.n	80010d6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80010c4:	4b16      	ldr	r3, [pc, #88]	; (8001120 <FLASH_SetErrorCode+0xa8>)
 80010c6:	69db      	ldr	r3, [r3, #28]
 80010c8:	f043 0304 	orr.w	r3, r3, #4
 80010cc:	4a14      	ldr	r2, [pc, #80]	; (8001120 <FLASH_SetErrorCode+0xa8>)
 80010ce:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <FLASH_SetErrorCode+0xa4>)
 80010d2:	2240      	movs	r2, #64	; 0x40
 80010d4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80010d6:	4b11      	ldr	r3, [pc, #68]	; (800111c <FLASH_SetErrorCode+0xa4>)
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d008      	beq.n	80010f4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80010e2:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <FLASH_SetErrorCode+0xa8>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	f043 0302 	orr.w	r3, r3, #2
 80010ea:	4a0d      	ldr	r2, [pc, #52]	; (8001120 <FLASH_SetErrorCode+0xa8>)
 80010ec:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80010ee:	4b0b      	ldr	r3, [pc, #44]	; (800111c <FLASH_SetErrorCode+0xa4>)
 80010f0:	2280      	movs	r2, #128	; 0x80
 80010f2:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80010f4:	4b09      	ldr	r3, [pc, #36]	; (800111c <FLASH_SetErrorCode+0xa4>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	f003 0302 	and.w	r3, r3, #2
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d008      	beq.n	8001112 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001100:	4b07      	ldr	r3, [pc, #28]	; (8001120 <FLASH_SetErrorCode+0xa8>)
 8001102:	69db      	ldr	r3, [r3, #28]
 8001104:	f043 0320 	orr.w	r3, r3, #32
 8001108:	4a05      	ldr	r2, [pc, #20]	; (8001120 <FLASH_SetErrorCode+0xa8>)
 800110a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800110c:	4b03      	ldr	r3, [pc, #12]	; (800111c <FLASH_SetErrorCode+0xa4>)
 800110e:	2202      	movs	r2, #2
 8001110:	60da      	str	r2, [r3, #12]
  }
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	40023c00 	.word	0x40023c00
 8001120:	20000130 	.word	0x20000130

08001124 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001136:	4b31      	ldr	r3, [pc, #196]	; (80011fc <HAL_FLASHEx_Erase+0xd8>)
 8001138:	7e1b      	ldrb	r3, [r3, #24]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d101      	bne.n	8001142 <HAL_FLASHEx_Erase+0x1e>
 800113e:	2302      	movs	r3, #2
 8001140:	e058      	b.n	80011f4 <HAL_FLASHEx_Erase+0xd0>
 8001142:	4b2e      	ldr	r3, [pc, #184]	; (80011fc <HAL_FLASHEx_Erase+0xd8>)
 8001144:	2201      	movs	r2, #1
 8001146:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001148:	f24c 3050 	movw	r0, #50000	; 0xc350
 800114c:	f7ff febc 	bl	8000ec8 <FLASH_WaitForLastOperation>
 8001150:	4603      	mov	r3, r0
 8001152:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001154:	7bfb      	ldrb	r3, [r7, #15]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d148      	bne.n	80011ec <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	f04f 32ff 	mov.w	r2, #4294967295
 8001160:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d115      	bne.n	8001196 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	b2da      	uxtb	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	4619      	mov	r1, r3
 8001176:	4610      	mov	r0, r2
 8001178:	f000 f844 	bl	8001204 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800117c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001180:	f7ff fea2 	bl	8000ec8 <FLASH_WaitForLastOperation>
 8001184:	4603      	mov	r3, r0
 8001186:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001188:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <HAL_FLASHEx_Erase+0xdc>)
 800118a:	691b      	ldr	r3, [r3, #16]
 800118c:	4a1c      	ldr	r2, [pc, #112]	; (8001200 <HAL_FLASHEx_Erase+0xdc>)
 800118e:	f023 0304 	bic.w	r3, r3, #4
 8001192:	6113      	str	r3, [r2, #16]
 8001194:	e028      	b.n	80011e8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	e01c      	b.n	80011d8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	691b      	ldr	r3, [r3, #16]
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	4619      	mov	r1, r3
 80011a6:	68b8      	ldr	r0, [r7, #8]
 80011a8:	f000 f850 	bl	800124c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80011ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80011b0:	f7ff fe8a 	bl	8000ec8 <FLASH_WaitForLastOperation>
 80011b4:	4603      	mov	r3, r0
 80011b6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <HAL_FLASHEx_Erase+0xdc>)
 80011ba:	691b      	ldr	r3, [r3, #16]
 80011bc:	4a10      	ldr	r2, [pc, #64]	; (8001200 <HAL_FLASHEx_Erase+0xdc>)
 80011be:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80011c2:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	68ba      	ldr	r2, [r7, #8]
 80011ce:	601a      	str	r2, [r3, #0]
          break;
 80011d0:	e00a      	b.n	80011e8 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	3301      	adds	r3, #1
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68da      	ldr	r2, [r3, #12]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	4413      	add	r3, r2
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d3da      	bcc.n	800119e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80011e8:	f000 f878 	bl	80012dc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80011ec:	4b03      	ldr	r3, [pc, #12]	; (80011fc <HAL_FLASHEx_Erase+0xd8>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	761a      	strb	r2, [r3, #24]

  return status;
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000130 	.word	0x20000130
 8001200:	40023c00 	.word	0x40023c00

08001204 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	6039      	str	r1, [r7, #0]
 800120e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001210:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <FLASH_MassErase+0x44>)
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	4a0c      	ldr	r2, [pc, #48]	; (8001248 <FLASH_MassErase+0x44>)
 8001216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800121a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <FLASH_MassErase+0x44>)
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	4a09      	ldr	r2, [pc, #36]	; (8001248 <FLASH_MassErase+0x44>)
 8001222:	f043 0304 	orr.w	r3, r3, #4
 8001226:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <FLASH_MassErase+0x44>)
 800122a:	691a      	ldr	r2, [r3, #16]
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	4313      	orrs	r3, r2
 8001232:	4a05      	ldr	r2, [pc, #20]	; (8001248 <FLASH_MassErase+0x44>)
 8001234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001238:	6113      	str	r3, [r2, #16]
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40023c00 	.word	0x40023c00

0800124c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800125c:	78fb      	ldrb	r3, [r7, #3]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d102      	bne.n	8001268 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	e010      	b.n	800128a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001268:	78fb      	ldrb	r3, [r7, #3]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d103      	bne.n	8001276 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800126e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	e009      	b.n	800128a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001276:	78fb      	ldrb	r3, [r7, #3]
 8001278:	2b02      	cmp	r3, #2
 800127a:	d103      	bne.n	8001284 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800127c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	e002      	b.n	800128a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001284:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001288:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800128a:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <FLASH_Erase_Sector+0x8c>)
 800128c:	691b      	ldr	r3, [r3, #16]
 800128e:	4a12      	ldr	r2, [pc, #72]	; (80012d8 <FLASH_Erase_Sector+0x8c>)
 8001290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001294:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <FLASH_Erase_Sector+0x8c>)
 8001298:	691a      	ldr	r2, [r3, #16]
 800129a:	490f      	ldr	r1, [pc, #60]	; (80012d8 <FLASH_Erase_Sector+0x8c>)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4313      	orrs	r3, r2
 80012a0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80012a2:	4b0d      	ldr	r3, [pc, #52]	; (80012d8 <FLASH_Erase_Sector+0x8c>)
 80012a4:	691b      	ldr	r3, [r3, #16]
 80012a6:	4a0c      	ldr	r2, [pc, #48]	; (80012d8 <FLASH_Erase_Sector+0x8c>)
 80012a8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80012ac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80012ae:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <FLASH_Erase_Sector+0x8c>)
 80012b0:	691a      	ldr	r2, [r3, #16]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	4313      	orrs	r3, r2
 80012b8:	4a07      	ldr	r2, [pc, #28]	; (80012d8 <FLASH_Erase_Sector+0x8c>)
 80012ba:	f043 0302 	orr.w	r3, r3, #2
 80012be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80012c0:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <FLASH_Erase_Sector+0x8c>)
 80012c2:	691b      	ldr	r3, [r3, #16]
 80012c4:	4a04      	ldr	r2, [pc, #16]	; (80012d8 <FLASH_Erase_Sector+0x8c>)
 80012c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ca:	6113      	str	r3, [r2, #16]
}
 80012cc:	bf00      	nop
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	40023c00 	.word	0x40023c00

080012dc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80012e0:	4b20      	ldr	r3, [pc, #128]	; (8001364 <FLASH_FlushCaches+0x88>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d017      	beq.n	800131c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80012ec:	4b1d      	ldr	r3, [pc, #116]	; (8001364 <FLASH_FlushCaches+0x88>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a1c      	ldr	r2, [pc, #112]	; (8001364 <FLASH_FlushCaches+0x88>)
 80012f2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80012f6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80012f8:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <FLASH_FlushCaches+0x88>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a19      	ldr	r2, [pc, #100]	; (8001364 <FLASH_FlushCaches+0x88>)
 80012fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	4b17      	ldr	r3, [pc, #92]	; (8001364 <FLASH_FlushCaches+0x88>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a16      	ldr	r2, [pc, #88]	; (8001364 <FLASH_FlushCaches+0x88>)
 800130a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800130e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001310:	4b14      	ldr	r3, [pc, #80]	; (8001364 <FLASH_FlushCaches+0x88>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a13      	ldr	r2, [pc, #76]	; (8001364 <FLASH_FlushCaches+0x88>)
 8001316:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800131a:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800131c:	4b11      	ldr	r3, [pc, #68]	; (8001364 <FLASH_FlushCaches+0x88>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001324:	2b00      	cmp	r3, #0
 8001326:	d017      	beq.n	8001358 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001328:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <FLASH_FlushCaches+0x88>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a0d      	ldr	r2, [pc, #52]	; (8001364 <FLASH_FlushCaches+0x88>)
 800132e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001332:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <FLASH_FlushCaches+0x88>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <FLASH_FlushCaches+0x88>)
 800133a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800133e:	6013      	str	r3, [r2, #0]
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <FLASH_FlushCaches+0x88>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a07      	ldr	r2, [pc, #28]	; (8001364 <FLASH_FlushCaches+0x88>)
 8001346:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800134a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <FLASH_FlushCaches+0x88>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a04      	ldr	r2, [pc, #16]	; (8001364 <FLASH_FlushCaches+0x88>)
 8001352:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001356:	6013      	str	r3, [r2, #0]
  }
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40023c00 	.word	0x40023c00

08001368 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f001 feb2 	bl	80030e8 <USB_GetMode>
 8001384:	4603      	mov	r3, r0
 8001386:	2b01      	cmp	r3, #1
 8001388:	f040 80ef 	bne.w	800156a <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f001 fe96 	bl	80030c2 <USB_ReadInterrupts>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	f000 80e5 	beq.w	8001568 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f001 fe8d 	bl	80030c2 <USB_ReadInterrupts>
 80013a8:	4603      	mov	r3, r0
 80013aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80013b2:	d104      	bne.n	80013be <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80013bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f001 fe7d 	bl	80030c2 <USB_ReadInterrupts>
 80013c8:	4603      	mov	r3, r0
 80013ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80013d2:	d104      	bne.n	80013de <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80013dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f001 fe6d 	bl	80030c2 <USB_ReadInterrupts>
 80013e8:	4603      	mov	r3, r0
 80013ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80013f2:	d104      	bne.n	80013fe <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80013fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f001 fe5d 	bl	80030c2 <USB_ReadInterrupts>
 8001408:	4603      	mov	r3, r0
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b02      	cmp	r3, #2
 8001410:	d103      	bne.n	800141a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2202      	movs	r2, #2
 8001418:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f001 fe4f 	bl	80030c2 <USB_ReadInterrupts>
 8001424:	4603      	mov	r3, r0
 8001426:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800142a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800142e:	d115      	bne.n	800145c <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001438:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	2b00      	cmp	r3, #0
 8001448:	d108      	bne.n	800145c <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f002 f8e5 	bl	800361a <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2101      	movs	r1, #1
 8001456:	4618      	mov	r0, r3
 8001458:	f001 fe54 	bl	8003104 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4618      	mov	r0, r3
 8001462:	f001 fe2e 	bl	80030c2 <USB_ReadInterrupts>
 8001466:	4603      	mov	r3, r0
 8001468:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800146c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001470:	d102      	bne.n	8001478 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f001 f8f0 	bl	8002658 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f001 fe20 	bl	80030c2 <USB_ReadInterrupts>
 8001482:	4603      	mov	r3, r0
 8001484:	f003 0308 	and.w	r3, r3, #8
 8001488:	2b08      	cmp	r3, #8
 800148a:	d106      	bne.n	800149a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f002 f8a8 	bl	80035e2 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2208      	movs	r2, #8
 8001498:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f001 fe0f 	bl	80030c2 <USB_ReadInterrupts>
 80014a4:	4603      	mov	r3, r0
 80014a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80014ae:	d138      	bne.n	8001522 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f001 fe5f 	bl	8003178 <USB_HC_ReadInterrupt>
 80014ba:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	e025      	b.n	800150e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	f003 030f 	and.w	r3, r3, #15
 80014c8:	68ba      	ldr	r2, [r7, #8]
 80014ca:	fa22 f303 	lsr.w	r3, r2, r3
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d018      	beq.n	8001508 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	015a      	lsls	r2, r3, #5
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4413      	add	r3, r2
 80014de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014ec:	d106      	bne.n	80014fc <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	4619      	mov	r1, r3
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 f858 	bl	80015aa <HCD_HC_IN_IRQHandler>
 80014fa:	e005      	b.n	8001508 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	4619      	mov	r1, r3
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 fc86 	bl	8001e14 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	3301      	adds	r3, #1
 800150c:	617b      	str	r3, [r7, #20]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	429a      	cmp	r2, r3
 8001516:	d3d4      	bcc.n	80014c2 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001520:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f001 fdcb 	bl	80030c2 <USB_ReadInterrupts>
 800152c:	4603      	mov	r3, r0
 800152e:	f003 0310 	and.w	r3, r3, #16
 8001532:	2b10      	cmp	r3, #16
 8001534:	d101      	bne.n	800153a <HAL_HCD_IRQHandler+0x1d2>
 8001536:	2301      	movs	r3, #1
 8001538:	e000      	b.n	800153c <HAL_HCD_IRQHandler+0x1d4>
 800153a:	2300      	movs	r3, #0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d014      	beq.n	800156a <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	699a      	ldr	r2, [r3, #24]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 0210 	bic.w	r2, r2, #16
 800154e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f000 ffd5 	bl	8002500 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	699a      	ldr	r2, [r3, #24]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f042 0210 	orr.w	r2, r2, #16
 8001564:	619a      	str	r2, [r3, #24]
 8001566:	e000      	b.n	800156a <HAL_HCD_IRQHandler+0x202>
      return;
 8001568:	bf00      	nop
    }
  }
}
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800157e:	2b01      	cmp	r3, #1
 8001580:	d101      	bne.n	8001586 <HAL_HCD_Stop+0x16>
 8001582:	2302      	movs	r3, #2
 8001584:	e00d      	b.n	80015a2 <HAL_HCD_Stop+0x32>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f001 ff00 	bl	8003398 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b086      	sub	sp, #24
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	460b      	mov	r3, r1
 80015b4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80015c0:	78fb      	ldrb	r3, [r7, #3]
 80015c2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	015a      	lsls	r2, r3, #5
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	4413      	add	r3, r2
 80015cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 0304 	and.w	r3, r3, #4
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	d119      	bne.n	800160e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	015a      	lsls	r2, r3, #5
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	4413      	add	r3, r2
 80015e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015e6:	461a      	mov	r2, r3
 80015e8:	2304      	movs	r3, #4
 80015ea:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	015a      	lsls	r2, r3, #5
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	4413      	add	r3, r2
 80015f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	0151      	lsls	r1, r2, #5
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	440a      	add	r2, r1
 8001602:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001606:	f043 0302 	orr.w	r3, r3, #2
 800160a:	60d3      	str	r3, [r2, #12]
 800160c:	e0ce      	b.n	80017ac <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	015a      	lsls	r2, r3, #5
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	4413      	add	r3, r2
 8001616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001624:	d12c      	bne.n	8001680 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	015a      	lsls	r2, r3, #5
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	4413      	add	r3, r2
 800162e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001632:	461a      	mov	r2, r3
 8001634:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001638:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	4613      	mov	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	440b      	add	r3, r1
 8001648:	335d      	adds	r3, #93	; 0x5d
 800164a:	2207      	movs	r2, #7
 800164c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	015a      	lsls	r2, r3, #5
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	4413      	add	r3, r2
 8001656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	0151      	lsls	r1, r2, #5
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	440a      	add	r2, r1
 8001664:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001668:	f043 0302 	orr.w	r3, r3, #2
 800166c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	b2d2      	uxtb	r2, r2
 8001676:	4611      	mov	r1, r2
 8001678:	4618      	mov	r0, r3
 800167a:	f001 fd8e 	bl	800319a <USB_HC_Halt>
 800167e:	e095      	b.n	80017ac <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	015a      	lsls	r2, r3, #5
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	4413      	add	r3, r2
 8001688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 0320 	and.w	r3, r3, #32
 8001692:	2b20      	cmp	r3, #32
 8001694:	d109      	bne.n	80016aa <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	015a      	lsls	r2, r3, #5
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	4413      	add	r3, r2
 800169e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016a2:	461a      	mov	r2, r3
 80016a4:	2320      	movs	r3, #32
 80016a6:	6093      	str	r3, [r2, #8]
 80016a8:	e080      	b.n	80017ac <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	015a      	lsls	r2, r3, #5
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	4413      	add	r3, r2
 80016b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f003 0308 	and.w	r3, r3, #8
 80016bc:	2b08      	cmp	r3, #8
 80016be:	d134      	bne.n	800172a <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	015a      	lsls	r2, r3, #5
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	4413      	add	r3, r2
 80016c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	0151      	lsls	r1, r2, #5
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	440a      	add	r2, r1
 80016d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80016da:	f043 0302 	orr.w	r3, r3, #2
 80016de:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	440b      	add	r3, r1
 80016ee:	335d      	adds	r3, #93	; 0x5d
 80016f0:	2205      	movs	r2, #5
 80016f2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	015a      	lsls	r2, r3, #5
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	4413      	add	r3, r2
 80016fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001700:	461a      	mov	r2, r3
 8001702:	2310      	movs	r3, #16
 8001704:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	015a      	lsls	r2, r3, #5
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	4413      	add	r3, r2
 800170e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001712:	461a      	mov	r2, r3
 8001714:	2308      	movs	r3, #8
 8001716:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	4611      	mov	r1, r2
 8001722:	4618      	mov	r0, r3
 8001724:	f001 fd39 	bl	800319a <USB_HC_Halt>
 8001728:	e040      	b.n	80017ac <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	015a      	lsls	r2, r3, #5
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	4413      	add	r3, r2
 8001732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800173c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001740:	d134      	bne.n	80017ac <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	015a      	lsls	r2, r3, #5
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	4413      	add	r3, r2
 800174a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	0151      	lsls	r1, r2, #5
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	440a      	add	r2, r1
 8001758:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800175c:	f043 0302 	orr.w	r3, r3, #2
 8001760:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	4611      	mov	r1, r2
 800176c:	4618      	mov	r0, r3
 800176e:	f001 fd14 	bl	800319a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	015a      	lsls	r2, r3, #5
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	4413      	add	r3, r2
 800177a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800177e:	461a      	mov	r2, r3
 8001780:	2310      	movs	r3, #16
 8001782:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	4613      	mov	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	440b      	add	r3, r1
 8001792:	335d      	adds	r3, #93	; 0x5d
 8001794:	2208      	movs	r2, #8
 8001796:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	015a      	lsls	r2, r3, #5
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	4413      	add	r3, r2
 80017a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017a4:	461a      	mov	r2, r3
 80017a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017aa:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	015a      	lsls	r2, r3, #5
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	4413      	add	r3, r2
 80017b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017c2:	d122      	bne.n	800180a <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	015a      	lsls	r2, r3, #5
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	4413      	add	r3, r2
 80017cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	0151      	lsls	r1, r2, #5
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	440a      	add	r2, r1
 80017da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80017de:	f043 0302 	orr.w	r3, r3, #2
 80017e2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	68fa      	ldr	r2, [r7, #12]
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	4611      	mov	r1, r2
 80017ee:	4618      	mov	r0, r3
 80017f0:	f001 fcd3 	bl	800319a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	015a      	lsls	r2, r3, #5
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	4413      	add	r3, r2
 80017fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001800:	461a      	mov	r2, r3
 8001802:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001806:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001808:	e300      	b.n	8001e0c <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	015a      	lsls	r2, r3, #5
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	4413      	add	r3, r2
 8001812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	2b01      	cmp	r3, #1
 800181e:	f040 80fd 	bne.w	8001a1c <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d01b      	beq.n	8001862 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	4613      	mov	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	440b      	add	r3, r1
 8001838:	3348      	adds	r3, #72	; 0x48
 800183a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	0159      	lsls	r1, r3, #5
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	440b      	add	r3, r1
 8001844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800184e:	1ad1      	subs	r1, r2, r3
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	4403      	add	r3, r0
 800185e:	334c      	adds	r3, #76	; 0x4c
 8001860:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	440b      	add	r3, r1
 8001870:	335d      	adds	r3, #93	; 0x5d
 8001872:	2201      	movs	r2, #1
 8001874:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	4613      	mov	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4413      	add	r3, r2
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	440b      	add	r3, r1
 8001884:	3358      	adds	r3, #88	; 0x58
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	015a      	lsls	r2, r3, #5
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	4413      	add	r3, r2
 8001892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001896:	461a      	mov	r2, r3
 8001898:	2301      	movs	r3, #1
 800189a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	4613      	mov	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	440b      	add	r3, r1
 80018aa:	333f      	adds	r3, #63	; 0x3f
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d00a      	beq.n	80018c8 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	68fa      	ldr	r2, [r7, #12]
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	440b      	add	r3, r1
 80018c0:	333f      	adds	r3, #63	; 0x3f
 80018c2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d121      	bne.n	800190c <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	015a      	lsls	r2, r3, #5
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	4413      	add	r3, r2
 80018d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	0151      	lsls	r1, r2, #5
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	440a      	add	r2, r1
 80018de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80018e2:	f043 0302 	orr.w	r3, r3, #2
 80018e6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	4611      	mov	r1, r2
 80018f2:	4618      	mov	r0, r3
 80018f4:	f001 fc51 	bl	800319a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	015a      	lsls	r2, r3, #5
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	4413      	add	r3, r2
 8001900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001904:	461a      	mov	r2, r3
 8001906:	2310      	movs	r3, #16
 8001908:	6093      	str	r3, [r2, #8]
 800190a:	e070      	b.n	80019ee <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	4613      	mov	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	440b      	add	r3, r1
 800191a:	333f      	adds	r3, #63	; 0x3f
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b03      	cmp	r3, #3
 8001920:	d12a      	bne.n	8001978 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	015a      	lsls	r2, r3, #5
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	4413      	add	r3, r2
 800192a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	0151      	lsls	r1, r2, #5
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	440a      	add	r2, r1
 8001938:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800193c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001940:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	4613      	mov	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	440b      	add	r3, r1
 8001950:	335c      	adds	r3, #92	; 0x5c
 8001952:	2201      	movs	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	b2d8      	uxtb	r0, r3
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	4613      	mov	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	440b      	add	r3, r1
 8001968:	335c      	adds	r3, #92	; 0x5c
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	461a      	mov	r2, r3
 800196e:	4601      	mov	r1, r0
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f001 fe60 	bl	8003636 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001976:	e03a      	b.n	80019ee <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	440b      	add	r3, r1
 8001986:	333f      	adds	r3, #63	; 0x3f
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d12f      	bne.n	80019ee <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	4613      	mov	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	440b      	add	r3, r1
 800199c:	335c      	adds	r3, #92	; 0x5c
 800199e:	2201      	movs	r2, #1
 80019a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	440b      	add	r3, r1
 80019b0:	3350      	adds	r3, #80	; 0x50
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	f083 0301 	eor.w	r3, r3, #1
 80019b8:	b2d8      	uxtb	r0, r3
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	4613      	mov	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	440b      	add	r3, r1
 80019c8:	3350      	adds	r3, #80	; 0x50
 80019ca:	4602      	mov	r2, r0
 80019cc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	b2d8      	uxtb	r0, r3
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	4613      	mov	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4413      	add	r3, r2
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	440b      	add	r3, r1
 80019e0:	335c      	adds	r3, #92	; 0x5c
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	461a      	mov	r2, r3
 80019e6:	4601      	mov	r1, r0
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f001 fe24 	bl	8003636 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	4613      	mov	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4413      	add	r3, r2
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	440b      	add	r3, r1
 80019fc:	3350      	adds	r3, #80	; 0x50
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	f083 0301 	eor.w	r3, r3, #1
 8001a04:	b2d8      	uxtb	r0, r3
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	440b      	add	r3, r1
 8001a14:	3350      	adds	r3, #80	; 0x50
 8001a16:	4602      	mov	r2, r0
 8001a18:	701a      	strb	r2, [r3, #0]
}
 8001a1a:	e1f7      	b.n	8001e0c <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	015a      	lsls	r2, r3, #5
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	4413      	add	r3, r2
 8001a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	f040 811a 	bne.w	8001c68 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	015a      	lsls	r2, r3, #5
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	0151      	lsls	r1, r2, #5
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	440a      	add	r2, r1
 8001a4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a4e:	f023 0302 	bic.w	r3, r3, #2
 8001a52:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	440b      	add	r3, r1
 8001a62:	335d      	adds	r3, #93	; 0x5d
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d10a      	bne.n	8001a80 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001a6a:	6879      	ldr	r1, [r7, #4]
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	440b      	add	r3, r1
 8001a78:	335c      	adds	r3, #92	; 0x5c
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	701a      	strb	r2, [r3, #0]
 8001a7e:	e0d9      	b.n	8001c34 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001a80:	6879      	ldr	r1, [r7, #4]
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	440b      	add	r3, r1
 8001a8e:	335d      	adds	r3, #93	; 0x5d
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b05      	cmp	r3, #5
 8001a94:	d10a      	bne.n	8001aac <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	440b      	add	r3, r1
 8001aa4:	335c      	adds	r3, #92	; 0x5c
 8001aa6:	2205      	movs	r2, #5
 8001aa8:	701a      	strb	r2, [r3, #0]
 8001aaa:	e0c3      	b.n	8001c34 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	440b      	add	r3, r1
 8001aba:	335d      	adds	r3, #93	; 0x5d
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b06      	cmp	r3, #6
 8001ac0:	d00a      	beq.n	8001ad8 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	440b      	add	r3, r1
 8001ad0:	335d      	adds	r3, #93	; 0x5d
 8001ad2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	d156      	bne.n	8001b86 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8001ad8:	6879      	ldr	r1, [r7, #4]
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	4613      	mov	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	440b      	add	r3, r1
 8001ae6:	3358      	adds	r3, #88	; 0x58
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	1c59      	adds	r1, r3, #1
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	4613      	mov	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4413      	add	r3, r2
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	4403      	add	r3, r0
 8001afa:	3358      	adds	r3, #88	; 0x58
 8001afc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	4613      	mov	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	4413      	add	r3, r2
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	440b      	add	r3, r1
 8001b0c:	3358      	adds	r3, #88	; 0x58
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b03      	cmp	r3, #3
 8001b12:	d914      	bls.n	8001b3e <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	440b      	add	r3, r1
 8001b22:	3358      	adds	r3, #88	; 0x58
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001b28:	6879      	ldr	r1, [r7, #4]
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	440b      	add	r3, r1
 8001b36:	335c      	adds	r3, #92	; 0x5c
 8001b38:	2204      	movs	r2, #4
 8001b3a:	701a      	strb	r2, [r3, #0]
 8001b3c:	e009      	b.n	8001b52 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	4613      	mov	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	440b      	add	r3, r1
 8001b4c:	335c      	adds	r3, #92	; 0x5c
 8001b4e:	2202      	movs	r2, #2
 8001b50:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	015a      	lsls	r2, r3, #5
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	4413      	add	r3, r2
 8001b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001b68:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b70:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	015a      	lsls	r2, r3, #5
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	4413      	add	r3, r2
 8001b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b7e:	461a      	mov	r2, r3
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	6013      	str	r3, [r2, #0]
 8001b84:	e056      	b.n	8001c34 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	440b      	add	r3, r1
 8001b94:	335d      	adds	r3, #93	; 0x5d
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b03      	cmp	r3, #3
 8001b9a:	d123      	bne.n	8001be4 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001b9c:	6879      	ldr	r1, [r7, #4]
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	440b      	add	r3, r1
 8001baa:	335c      	adds	r3, #92	; 0x5c
 8001bac:	2202      	movs	r2, #2
 8001bae:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	015a      	lsls	r2, r3, #5
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001bc6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001bce:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	015a      	lsls	r2, r3, #5
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bdc:	461a      	mov	r2, r3
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	e027      	b.n	8001c34 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001be4:	6879      	ldr	r1, [r7, #4]
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	440b      	add	r3, r1
 8001bf2:	335d      	adds	r3, #93	; 0x5d
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b07      	cmp	r3, #7
 8001bf8:	d11c      	bne.n	8001c34 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	440b      	add	r3, r1
 8001c08:	3358      	adds	r3, #88	; 0x58
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	1c59      	adds	r1, r3, #1
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	4613      	mov	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	4403      	add	r3, r0
 8001c1c:	3358      	adds	r3, #88	; 0x58
 8001c1e:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001c20:	6879      	ldr	r1, [r7, #4]
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	4613      	mov	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	440b      	add	r3, r1
 8001c2e:	335c      	adds	r3, #92	; 0x5c
 8001c30:	2204      	movs	r2, #4
 8001c32:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	015a      	lsls	r2, r3, #5
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c40:	461a      	mov	r2, r3
 8001c42:	2302      	movs	r3, #2
 8001c44:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	b2d8      	uxtb	r0, r3
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4413      	add	r3, r2
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	440b      	add	r3, r1
 8001c58:	335c      	adds	r3, #92	; 0x5c
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4601      	mov	r1, r0
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f001 fce8 	bl	8003636 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001c66:	e0d1      	b.n	8001e0c <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	015a      	lsls	r2, r3, #5
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	4413      	add	r3, r2
 8001c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c7a:	2b80      	cmp	r3, #128	; 0x80
 8001c7c:	d13e      	bne.n	8001cfc <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	015a      	lsls	r2, r3, #5
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	4413      	add	r3, r2
 8001c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	0151      	lsls	r1, r2, #5
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	440a      	add	r2, r1
 8001c94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c98:	f043 0302 	orr.w	r3, r3, #2
 8001c9c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	440b      	add	r3, r1
 8001cac:	3358      	adds	r3, #88	; 0x58
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	1c59      	adds	r1, r3, #1
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	4403      	add	r3, r0
 8001cc0:	3358      	adds	r3, #88	; 0x58
 8001cc2:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001cc4:	6879      	ldr	r1, [r7, #4]
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	440b      	add	r3, r1
 8001cd2:	335d      	adds	r3, #93	; 0x5d
 8001cd4:	2206      	movs	r2, #6
 8001cd6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	4611      	mov	r1, r2
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f001 fa59 	bl	800319a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	015a      	lsls	r2, r3, #5
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4413      	add	r3, r2
 8001cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	2380      	movs	r3, #128	; 0x80
 8001cf8:	6093      	str	r3, [r2, #8]
}
 8001cfa:	e087      	b.n	8001e0c <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	015a      	lsls	r2, r3, #5
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	4413      	add	r3, r2
 8001d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 0310 	and.w	r3, r3, #16
 8001d0e:	2b10      	cmp	r3, #16
 8001d10:	d17c      	bne.n	8001e0c <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	4613      	mov	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	440b      	add	r3, r1
 8001d20:	333f      	adds	r3, #63	; 0x3f
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b03      	cmp	r3, #3
 8001d26:	d122      	bne.n	8001d6e <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	440b      	add	r3, r1
 8001d36:	3358      	adds	r3, #88	; 0x58
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	015a      	lsls	r2, r3, #5
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	4413      	add	r3, r2
 8001d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	0151      	lsls	r1, r2, #5
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	440a      	add	r2, r1
 8001d52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d56:	f043 0302 	orr.w	r3, r3, #2
 8001d5a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	4611      	mov	r1, r2
 8001d66:	4618      	mov	r0, r3
 8001d68:	f001 fa17 	bl	800319a <USB_HC_Halt>
 8001d6c:	e045      	b.n	8001dfa <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	4613      	mov	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	440b      	add	r3, r1
 8001d7c:	333f      	adds	r3, #63	; 0x3f
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d00a      	beq.n	8001d9a <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	440b      	add	r3, r1
 8001d92:	333f      	adds	r3, #63	; 0x3f
 8001d94:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d12f      	bne.n	8001dfa <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001d9a:	6879      	ldr	r1, [r7, #4]
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	440b      	add	r3, r1
 8001da8:	3358      	adds	r3, #88	; 0x58
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d121      	bne.n	8001dfa <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	440b      	add	r3, r1
 8001dc4:	335d      	adds	r3, #93	; 0x5d
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	015a      	lsls	r2, r3, #5
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	0151      	lsls	r1, r2, #5
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	440a      	add	r2, r1
 8001de0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001de4:	f043 0302 	orr.w	r3, r3, #2
 8001de8:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	4611      	mov	r1, r2
 8001df4:	4618      	mov	r0, r3
 8001df6:	f001 f9d0 	bl	800319a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	015a      	lsls	r2, r3, #5
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	4413      	add	r3, r2
 8001e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e06:	461a      	mov	r2, r3
 8001e08:	2310      	movs	r3, #16
 8001e0a:	6093      	str	r3, [r2, #8]
}
 8001e0c:	bf00      	nop
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001e2a:	78fb      	ldrb	r3, [r7, #3]
 8001e2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	015a      	lsls	r2, r3, #5
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	4413      	add	r3, r2
 8001e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b04      	cmp	r3, #4
 8001e42:	d119      	bne.n	8001e78 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	015a      	lsls	r2, r3, #5
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e50:	461a      	mov	r2, r3
 8001e52:	2304      	movs	r3, #4
 8001e54:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	015a      	lsls	r2, r3, #5
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	0151      	lsls	r1, r2, #5
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	440a      	add	r2, r1
 8001e6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e70:	f043 0302 	orr.w	r3, r3, #2
 8001e74:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8001e76:	e33e      	b.n	80024f6 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	015a      	lsls	r2, r3, #5
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	4413      	add	r3, r2
 8001e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f003 0320 	and.w	r3, r3, #32
 8001e8a:	2b20      	cmp	r3, #32
 8001e8c:	d141      	bne.n	8001f12 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	015a      	lsls	r2, r3, #5
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	4413      	add	r3, r2
 8001e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	2320      	movs	r3, #32
 8001e9e:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	440b      	add	r3, r1
 8001eae:	333d      	adds	r3, #61	; 0x3d
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	f040 831f 	bne.w	80024f6 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	440b      	add	r3, r1
 8001ec6:	333d      	adds	r3, #61	; 0x3d
 8001ec8:	2200      	movs	r2, #0
 8001eca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001ecc:	6879      	ldr	r1, [r7, #4]
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	440b      	add	r3, r1
 8001eda:	335c      	adds	r3, #92	; 0x5c
 8001edc:	2202      	movs	r2, #2
 8001ede:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	015a      	lsls	r2, r3, #5
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	0151      	lsls	r1, r2, #5
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	440a      	add	r2, r1
 8001ef6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001efa:	f043 0302 	orr.w	r3, r3, #2
 8001efe:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	4611      	mov	r1, r2
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f001 f945 	bl	800319a <USB_HC_Halt>
}
 8001f10:	e2f1      	b.n	80024f6 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	015a      	lsls	r2, r3, #5
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	4413      	add	r3, r2
 8001f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f24:	2b40      	cmp	r3, #64	; 0x40
 8001f26:	d13f      	bne.n	8001fa8 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8001f28:	6879      	ldr	r1, [r7, #4]
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	440b      	add	r3, r1
 8001f36:	335d      	adds	r3, #93	; 0x5d
 8001f38:	2204      	movs	r2, #4
 8001f3a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	4613      	mov	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	440b      	add	r3, r1
 8001f4a:	333d      	adds	r3, #61	; 0x3d
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	440b      	add	r3, r1
 8001f5e:	3358      	adds	r3, #88	; 0x58
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	015a      	lsls	r2, r3, #5
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	0151      	lsls	r1, r2, #5
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	440a      	add	r2, r1
 8001f7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f7e:	f043 0302 	orr.w	r3, r3, #2
 8001f82:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	4611      	mov	r1, r2
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f001 f903 	bl	800319a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	015a      	lsls	r2, r3, #5
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	2340      	movs	r3, #64	; 0x40
 8001fa4:	6093      	str	r3, [r2, #8]
}
 8001fa6:	e2a6      	b.n	80024f6 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	015a      	lsls	r2, r3, #5
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	4413      	add	r3, r2
 8001fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fbe:	d122      	bne.n	8002006 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	015a      	lsls	r2, r3, #5
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	0151      	lsls	r1, r2, #5
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	440a      	add	r2, r1
 8001fd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fda:	f043 0302 	orr.w	r3, r3, #2
 8001fde:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	4611      	mov	r1, r2
 8001fea:	4618      	mov	r0, r3
 8001fec:	f001 f8d5 	bl	800319a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	015a      	lsls	r2, r3, #5
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002002:	6093      	str	r3, [r2, #8]
}
 8002004:	e277      	b.n	80024f6 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	015a      	lsls	r2, r3, #5
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4413      	add	r3, r2
 800200e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b01      	cmp	r3, #1
 800201a:	d135      	bne.n	8002088 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	4613      	mov	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	440b      	add	r3, r1
 800202a:	3358      	adds	r3, #88	; 0x58
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	015a      	lsls	r2, r3, #5
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	4413      	add	r3, r2
 8002038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	0151      	lsls	r1, r2, #5
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	440a      	add	r2, r1
 8002046:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800204a:	f043 0302 	orr.w	r3, r3, #2
 800204e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	4611      	mov	r1, r2
 800205a:	4618      	mov	r0, r3
 800205c:	f001 f89d 	bl	800319a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	015a      	lsls	r2, r3, #5
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4413      	add	r3, r2
 8002068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800206c:	461a      	mov	r2, r3
 800206e:	2301      	movs	r3, #1
 8002070:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	440b      	add	r3, r1
 8002080:	335d      	adds	r3, #93	; 0x5d
 8002082:	2201      	movs	r2, #1
 8002084:	701a      	strb	r2, [r3, #0]
}
 8002086:	e236      	b.n	80024f6 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	015a      	lsls	r2, r3, #5
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	4413      	add	r3, r2
 8002090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	2b08      	cmp	r3, #8
 800209c:	d12b      	bne.n	80020f6 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	015a      	lsls	r2, r3, #5
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	4413      	add	r3, r2
 80020a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020aa:	461a      	mov	r2, r3
 80020ac:	2308      	movs	r3, #8
 80020ae:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	015a      	lsls	r2, r3, #5
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	4413      	add	r3, r2
 80020b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	0151      	lsls	r1, r2, #5
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	440a      	add	r2, r1
 80020c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020ca:	f043 0302 	orr.w	r3, r3, #2
 80020ce:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	4611      	mov	r1, r2
 80020da:	4618      	mov	r0, r3
 80020dc:	f001 f85d 	bl	800319a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	4613      	mov	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	440b      	add	r3, r1
 80020ee:	335d      	adds	r3, #93	; 0x5d
 80020f0:	2205      	movs	r2, #5
 80020f2:	701a      	strb	r2, [r3, #0]
}
 80020f4:	e1ff      	b.n	80024f6 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	015a      	lsls	r2, r3, #5
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4413      	add	r3, r2
 80020fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 0310 	and.w	r3, r3, #16
 8002108:	2b10      	cmp	r3, #16
 800210a:	d155      	bne.n	80021b8 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	4613      	mov	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	440b      	add	r3, r1
 800211a:	3358      	adds	r3, #88	; 0x58
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	440b      	add	r3, r1
 800212e:	335d      	adds	r3, #93	; 0x5d
 8002130:	2203      	movs	r2, #3
 8002132:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	440b      	add	r3, r1
 8002142:	333d      	adds	r3, #61	; 0x3d
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d114      	bne.n	8002174 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	440b      	add	r3, r1
 8002158:	333c      	adds	r3, #60	; 0x3c
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d109      	bne.n	8002174 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	4613      	mov	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	440b      	add	r3, r1
 800216e:	333d      	adds	r3, #61	; 0x3d
 8002170:	2201      	movs	r2, #1
 8002172:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	015a      	lsls	r2, r3, #5
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	4413      	add	r3, r2
 800217c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	0151      	lsls	r1, r2, #5
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	440a      	add	r2, r1
 800218a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800218e:	f043 0302 	orr.w	r3, r3, #2
 8002192:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	4611      	mov	r1, r2
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 fffb 	bl	800319a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	015a      	lsls	r2, r3, #5
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	4413      	add	r3, r2
 80021ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b0:	461a      	mov	r2, r3
 80021b2:	2310      	movs	r3, #16
 80021b4:	6093      	str	r3, [r2, #8]
}
 80021b6:	e19e      	b.n	80024f6 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	015a      	lsls	r2, r3, #5
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	4413      	add	r3, r2
 80021c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ca:	2b80      	cmp	r3, #128	; 0x80
 80021cc:	d12b      	bne.n	8002226 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	015a      	lsls	r2, r3, #5
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4413      	add	r3, r2
 80021d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	0151      	lsls	r1, r2, #5
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	440a      	add	r2, r1
 80021e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021e8:	f043 0302 	orr.w	r3, r3, #2
 80021ec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f000 ffce 	bl	800319a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	4613      	mov	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	440b      	add	r3, r1
 800220c:	335d      	adds	r3, #93	; 0x5d
 800220e:	2206      	movs	r2, #6
 8002210:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	015a      	lsls	r2, r3, #5
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	4413      	add	r3, r2
 800221a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800221e:	461a      	mov	r2, r3
 8002220:	2380      	movs	r3, #128	; 0x80
 8002222:	6093      	str	r3, [r2, #8]
}
 8002224:	e167      	b.n	80024f6 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	015a      	lsls	r2, r3, #5
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	4413      	add	r3, r2
 800222e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800223c:	d135      	bne.n	80022aa <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	015a      	lsls	r2, r3, #5
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	4413      	add	r3, r2
 8002246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	0151      	lsls	r1, r2, #5
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	440a      	add	r2, r1
 8002254:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002258:	f043 0302 	orr.w	r3, r3, #2
 800225c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	b2d2      	uxtb	r2, r2
 8002266:	4611      	mov	r1, r2
 8002268:	4618      	mov	r0, r3
 800226a:	f000 ff96 	bl	800319a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	015a      	lsls	r2, r3, #5
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	4413      	add	r3, r2
 8002276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800227a:	461a      	mov	r2, r3
 800227c:	2310      	movs	r3, #16
 800227e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	015a      	lsls	r2, r3, #5
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	4413      	add	r3, r2
 8002288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228c:	461a      	mov	r2, r3
 800228e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002292:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	4613      	mov	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	440b      	add	r3, r1
 80022a2:	335d      	adds	r3, #93	; 0x5d
 80022a4:	2208      	movs	r2, #8
 80022a6:	701a      	strb	r2, [r3, #0]
}
 80022a8:	e125      	b.n	80024f6 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	015a      	lsls	r2, r3, #5
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	4413      	add	r3, r2
 80022b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b02      	cmp	r3, #2
 80022be:	f040 811a 	bne.w	80024f6 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	015a      	lsls	r2, r3, #5
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	4413      	add	r3, r2
 80022ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	0151      	lsls	r1, r2, #5
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	440a      	add	r2, r1
 80022d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022dc:	f023 0302 	bic.w	r3, r3, #2
 80022e0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	4613      	mov	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	440b      	add	r3, r1
 80022f0:	335d      	adds	r3, #93	; 0x5d
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d137      	bne.n	8002368 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	4613      	mov	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	440b      	add	r3, r1
 8002306:	335c      	adds	r3, #92	; 0x5c
 8002308:	2201      	movs	r2, #1
 800230a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	440b      	add	r3, r1
 800231a:	333f      	adds	r3, #63	; 0x3f
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b02      	cmp	r3, #2
 8002320:	d00b      	beq.n	800233a <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	4613      	mov	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	440b      	add	r3, r1
 8002330:	333f      	adds	r3, #63	; 0x3f
 8002332:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002334:	2b03      	cmp	r3, #3
 8002336:	f040 80c5 	bne.w	80024c4 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	4613      	mov	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	440b      	add	r3, r1
 8002348:	3351      	adds	r3, #81	; 0x51
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	f083 0301 	eor.w	r3, r3, #1
 8002350:	b2d8      	uxtb	r0, r3
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	4613      	mov	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	440b      	add	r3, r1
 8002360:	3351      	adds	r3, #81	; 0x51
 8002362:	4602      	mov	r2, r0
 8002364:	701a      	strb	r2, [r3, #0]
 8002366:	e0ad      	b.n	80024c4 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	4613      	mov	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4413      	add	r3, r2
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	440b      	add	r3, r1
 8002376:	335d      	adds	r3, #93	; 0x5d
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b03      	cmp	r3, #3
 800237c:	d10a      	bne.n	8002394 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	4613      	mov	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	440b      	add	r3, r1
 800238c:	335c      	adds	r3, #92	; 0x5c
 800238e:	2202      	movs	r2, #2
 8002390:	701a      	strb	r2, [r3, #0]
 8002392:	e097      	b.n	80024c4 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	440b      	add	r3, r1
 80023a2:	335d      	adds	r3, #93	; 0x5d
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d10a      	bne.n	80023c0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	440b      	add	r3, r1
 80023b8:	335c      	adds	r3, #92	; 0x5c
 80023ba:	2202      	movs	r2, #2
 80023bc:	701a      	strb	r2, [r3, #0]
 80023be:	e081      	b.n	80024c4 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	4613      	mov	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	440b      	add	r3, r1
 80023ce:	335d      	adds	r3, #93	; 0x5d
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b05      	cmp	r3, #5
 80023d4:	d10a      	bne.n	80023ec <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	4613      	mov	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	440b      	add	r3, r1
 80023e4:	335c      	adds	r3, #92	; 0x5c
 80023e6:	2205      	movs	r2, #5
 80023e8:	701a      	strb	r2, [r3, #0]
 80023ea:	e06b      	b.n	80024c4 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	4613      	mov	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	440b      	add	r3, r1
 80023fa:	335d      	adds	r3, #93	; 0x5d
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b06      	cmp	r3, #6
 8002400:	d00a      	beq.n	8002418 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	440b      	add	r3, r1
 8002410:	335d      	adds	r3, #93	; 0x5d
 8002412:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002414:	2b08      	cmp	r3, #8
 8002416:	d155      	bne.n	80024c4 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002418:	6879      	ldr	r1, [r7, #4]
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	4613      	mov	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	440b      	add	r3, r1
 8002426:	3358      	adds	r3, #88	; 0x58
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	1c59      	adds	r1, r3, #1
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	4613      	mov	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	4403      	add	r3, r0
 800243a:	3358      	adds	r3, #88	; 0x58
 800243c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	4613      	mov	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	440b      	add	r3, r1
 800244c:	3358      	adds	r3, #88	; 0x58
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b03      	cmp	r3, #3
 8002452:	d914      	bls.n	800247e <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002454:	6879      	ldr	r1, [r7, #4]
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	4613      	mov	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	440b      	add	r3, r1
 8002462:	3358      	adds	r3, #88	; 0x58
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	4613      	mov	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	440b      	add	r3, r1
 8002476:	335c      	adds	r3, #92	; 0x5c
 8002478:	2204      	movs	r2, #4
 800247a:	701a      	strb	r2, [r3, #0]
 800247c:	e009      	b.n	8002492 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	4613      	mov	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	440b      	add	r3, r1
 800248c:	335c      	adds	r3, #92	; 0x5c
 800248e:	2202      	movs	r2, #2
 8002490:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	015a      	lsls	r2, r3, #5
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	4413      	add	r3, r2
 800249a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024a8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024b0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	015a      	lsls	r2, r3, #5
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	4413      	add	r3, r2
 80024ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024be:	461a      	mov	r2, r3
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	015a      	lsls	r2, r3, #5
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d0:	461a      	mov	r2, r3
 80024d2:	2302      	movs	r3, #2
 80024d4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	b2d8      	uxtb	r0, r3
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	440b      	add	r3, r1
 80024e8:	335c      	adds	r3, #92	; 0x5c
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	461a      	mov	r2, r3
 80024ee:	4601      	mov	r1, r0
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f001 f8a0 	bl	8003636 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80024f6:	bf00      	nop
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
	...

08002500 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b08a      	sub	sp, #40	; 0x28
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	f003 030f 	and.w	r3, r3, #15
 8002520:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	0c5b      	lsrs	r3, r3, #17
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	091b      	lsrs	r3, r3, #4
 8002530:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002534:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	2b02      	cmp	r3, #2
 800253a:	d003      	beq.n	8002544 <HCD_RXQLVL_IRQHandler+0x44>
 800253c:	2b05      	cmp	r3, #5
 800253e:	f000 8082 	beq.w	8002646 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002542:	e083      	b.n	800264c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d07f      	beq.n	800264a <HCD_RXQLVL_IRQHandler+0x14a>
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4613      	mov	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4413      	add	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	440b      	add	r3, r1
 8002558:	3344      	adds	r3, #68	; 0x44
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d074      	beq.n	800264a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6818      	ldr	r0, [r3, #0]
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	440b      	add	r3, r1
 8002572:	3344      	adds	r3, #68	; 0x44
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	b292      	uxth	r2, r2
 800257a:	4619      	mov	r1, r3
 800257c:	f000 fd78 	bl	8003070 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4613      	mov	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	440b      	add	r3, r1
 800258e:	3344      	adds	r3, #68	; 0x44
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	18d1      	adds	r1, r2, r3
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4613      	mov	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	4403      	add	r3, r0
 80025a4:	3344      	adds	r3, #68	; 0x44
 80025a6:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80025a8:	6879      	ldr	r1, [r7, #4]
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4613      	mov	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	440b      	add	r3, r1
 80025b6:	334c      	adds	r3, #76	; 0x4c
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	18d1      	adds	r1, r2, r3
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4613      	mov	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4413      	add	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	4403      	add	r3, r0
 80025cc:	334c      	adds	r3, #76	; 0x4c
 80025ce:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	015a      	lsls	r2, r3, #5
 80025d4:	6a3b      	ldr	r3, [r7, #32]
 80025d6:	4413      	add	r3, r2
 80025d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025dc:	691a      	ldr	r2, [r3, #16]
 80025de:	4b1d      	ldr	r3, [pc, #116]	; (8002654 <HCD_RXQLVL_IRQHandler+0x154>)
 80025e0:	4013      	ands	r3, r2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d031      	beq.n	800264a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	015a      	lsls	r2, r3, #5
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	4413      	add	r3, r2
 80025ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025fc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002604:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	015a      	lsls	r2, r3, #5
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	4413      	add	r3, r2
 800260e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002612:	461a      	mov	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4613      	mov	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	440b      	add	r3, r1
 8002626:	3350      	adds	r3, #80	; 0x50
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	f083 0301 	eor.w	r3, r3, #1
 800262e:	b2d8      	uxtb	r0, r3
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4613      	mov	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	440b      	add	r3, r1
 800263e:	3350      	adds	r3, #80	; 0x50
 8002640:	4602      	mov	r2, r0
 8002642:	701a      	strb	r2, [r3, #0]
      break;
 8002644:	e001      	b.n	800264a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002646:	bf00      	nop
 8002648:	e000      	b.n	800264c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800264a:	bf00      	nop
  }
}
 800264c:	bf00      	nop
 800264e:	3728      	adds	r7, #40	; 0x28
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	1ff80000 	.word	0x1ff80000

08002658 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002684:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b02      	cmp	r3, #2
 800268e:	d10b      	bne.n	80026a8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b01      	cmp	r3, #1
 8002698:	d102      	bne.n	80026a0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 ffaf 	bl	80035fe <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	f043 0302 	orr.w	r3, r3, #2
 80026a6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	2b08      	cmp	r3, #8
 80026b0:	d132      	bne.n	8002718 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	f043 0308 	orr.w	r3, r3, #8
 80026b8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b04      	cmp	r3, #4
 80026c2:	d126      	bne.n	8002712 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d113      	bne.n	80026f4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80026d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80026d6:	d106      	bne.n	80026e6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2102      	movs	r1, #2
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 fd10 	bl	8003104 <USB_InitFSLSPClkSel>
 80026e4:	e011      	b.n	800270a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2101      	movs	r1, #1
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 fd09 	bl	8003104 <USB_InitFSLSPClkSel>
 80026f2:	e00a      	b.n	800270a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d106      	bne.n	800270a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002702:	461a      	mov	r2, r3
 8002704:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002708:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 ffa1 	bl	8003652 <HAL_HCD_PortEnabled_Callback>
 8002710:	e002      	b.n	8002718 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 ffab 	bl	800366e <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f003 0320 	and.w	r3, r3, #32
 800271e:	2b20      	cmp	r3, #32
 8002720:	d103      	bne.n	800272a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	f043 0320 	orr.w	r3, r3, #32
 8002728:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002730:	461a      	mov	r2, r3
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	6013      	str	r3, [r2, #0]
}
 8002736:	bf00      	nop
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e25b      	b.n	8002c0a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d075      	beq.n	800284a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800275e:	4ba3      	ldr	r3, [pc, #652]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 030c 	and.w	r3, r3, #12
 8002766:	2b04      	cmp	r3, #4
 8002768:	d00c      	beq.n	8002784 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800276a:	4ba0      	ldr	r3, [pc, #640]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002772:	2b08      	cmp	r3, #8
 8002774:	d112      	bne.n	800279c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002776:	4b9d      	ldr	r3, [pc, #628]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800277e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002782:	d10b      	bne.n	800279c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002784:	4b99      	ldr	r3, [pc, #612]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d05b      	beq.n	8002848 <HAL_RCC_OscConfig+0x108>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d157      	bne.n	8002848 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e236      	b.n	8002c0a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027a4:	d106      	bne.n	80027b4 <HAL_RCC_OscConfig+0x74>
 80027a6:	4b91      	ldr	r3, [pc, #580]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a90      	ldr	r2, [pc, #576]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 80027ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	e01d      	b.n	80027f0 <HAL_RCC_OscConfig+0xb0>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027bc:	d10c      	bne.n	80027d8 <HAL_RCC_OscConfig+0x98>
 80027be:	4b8b      	ldr	r3, [pc, #556]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a8a      	ldr	r2, [pc, #552]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 80027c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	4b88      	ldr	r3, [pc, #544]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a87      	ldr	r2, [pc, #540]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 80027d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	e00b      	b.n	80027f0 <HAL_RCC_OscConfig+0xb0>
 80027d8:	4b84      	ldr	r3, [pc, #528]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a83      	ldr	r2, [pc, #524]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 80027de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	4b81      	ldr	r3, [pc, #516]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a80      	ldr	r2, [pc, #512]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 80027ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d013      	beq.n	8002820 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f8:	f7fe f9e2 	bl	8000bc0 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002800:	f7fe f9de 	bl	8000bc0 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b64      	cmp	r3, #100	; 0x64
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e1fb      	b.n	8002c0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002812:	4b76      	ldr	r3, [pc, #472]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f0      	beq.n	8002800 <HAL_RCC_OscConfig+0xc0>
 800281e:	e014      	b.n	800284a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002820:	f7fe f9ce 	bl	8000bc0 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002828:	f7fe f9ca 	bl	8000bc0 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b64      	cmp	r3, #100	; 0x64
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e1e7      	b.n	8002c0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800283a:	4b6c      	ldr	r3, [pc, #432]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0xe8>
 8002846:	e000      	b.n	800284a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d063      	beq.n	800291e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002856:	4b65      	ldr	r3, [pc, #404]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 030c 	and.w	r3, r3, #12
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00b      	beq.n	800287a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002862:	4b62      	ldr	r3, [pc, #392]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800286a:	2b08      	cmp	r3, #8
 800286c:	d11c      	bne.n	80028a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800286e:	4b5f      	ldr	r3, [pc, #380]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d116      	bne.n	80028a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800287a:	4b5c      	ldr	r3, [pc, #368]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d005      	beq.n	8002892 <HAL_RCC_OscConfig+0x152>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d001      	beq.n	8002892 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e1bb      	b.n	8002c0a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002892:	4b56      	ldr	r3, [pc, #344]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	4952      	ldr	r1, [pc, #328]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a6:	e03a      	b.n	800291e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d020      	beq.n	80028f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028b0:	4b4f      	ldr	r3, [pc, #316]	; (80029f0 <HAL_RCC_OscConfig+0x2b0>)
 80028b2:	2201      	movs	r2, #1
 80028b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b6:	f7fe f983 	bl	8000bc0 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028be:	f7fe f97f 	bl	8000bc0 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e19c      	b.n	8002c0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d0:	4b46      	ldr	r3, [pc, #280]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f0      	beq.n	80028be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028dc:	4b43      	ldr	r3, [pc, #268]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4940      	ldr	r1, [pc, #256]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	600b      	str	r3, [r1, #0]
 80028f0:	e015      	b.n	800291e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028f2:	4b3f      	ldr	r3, [pc, #252]	; (80029f0 <HAL_RCC_OscConfig+0x2b0>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f8:	f7fe f962 	bl	8000bc0 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002900:	f7fe f95e 	bl	8000bc0 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e17b      	b.n	8002c0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002912:	4b36      	ldr	r3, [pc, #216]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f0      	bne.n	8002900 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b00      	cmp	r3, #0
 8002928:	d030      	beq.n	800298c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d016      	beq.n	8002960 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002932:	4b30      	ldr	r3, [pc, #192]	; (80029f4 <HAL_RCC_OscConfig+0x2b4>)
 8002934:	2201      	movs	r2, #1
 8002936:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002938:	f7fe f942 	bl	8000bc0 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002940:	f7fe f93e 	bl	8000bc0 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e15b      	b.n	8002c0a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002952:	4b26      	ldr	r3, [pc, #152]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 8002954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0x200>
 800295e:	e015      	b.n	800298c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002960:	4b24      	ldr	r3, [pc, #144]	; (80029f4 <HAL_RCC_OscConfig+0x2b4>)
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002966:	f7fe f92b 	bl	8000bc0 <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800296e:	f7fe f927 	bl	8000bc0 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e144      	b.n	8002c0a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002980:	4b1a      	ldr	r3, [pc, #104]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 8002982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1f0      	bne.n	800296e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 80a0 	beq.w	8002ada <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800299a:	2300      	movs	r3, #0
 800299c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800299e:	4b13      	ldr	r3, [pc, #76]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10f      	bne.n	80029ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	60bb      	str	r3, [r7, #8]
 80029ae:	4b0f      	ldr	r3, [pc, #60]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	4a0e      	ldr	r2, [pc, #56]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 80029b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b8:	6413      	str	r3, [r2, #64]	; 0x40
 80029ba:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <HAL_RCC_OscConfig+0x2ac>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029c6:	2301      	movs	r3, #1
 80029c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ca:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <HAL_RCC_OscConfig+0x2b8>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d121      	bne.n	8002a1a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029d6:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <HAL_RCC_OscConfig+0x2b8>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a07      	ldr	r2, [pc, #28]	; (80029f8 <HAL_RCC_OscConfig+0x2b8>)
 80029dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029e2:	f7fe f8ed 	bl	8000bc0 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e8:	e011      	b.n	8002a0e <HAL_RCC_OscConfig+0x2ce>
 80029ea:	bf00      	nop
 80029ec:	40023800 	.word	0x40023800
 80029f0:	42470000 	.word	0x42470000
 80029f4:	42470e80 	.word	0x42470e80
 80029f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029fc:	f7fe f8e0 	bl	8000bc0 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e0fd      	b.n	8002c0a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a0e:	4b81      	ldr	r3, [pc, #516]	; (8002c14 <HAL_RCC_OscConfig+0x4d4>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0f0      	beq.n	80029fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d106      	bne.n	8002a30 <HAL_RCC_OscConfig+0x2f0>
 8002a22:	4b7d      	ldr	r3, [pc, #500]	; (8002c18 <HAL_RCC_OscConfig+0x4d8>)
 8002a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a26:	4a7c      	ldr	r2, [pc, #496]	; (8002c18 <HAL_RCC_OscConfig+0x4d8>)
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a2e:	e01c      	b.n	8002a6a <HAL_RCC_OscConfig+0x32a>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	2b05      	cmp	r3, #5
 8002a36:	d10c      	bne.n	8002a52 <HAL_RCC_OscConfig+0x312>
 8002a38:	4b77      	ldr	r3, [pc, #476]	; (8002c18 <HAL_RCC_OscConfig+0x4d8>)
 8002a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3c:	4a76      	ldr	r2, [pc, #472]	; (8002c18 <HAL_RCC_OscConfig+0x4d8>)
 8002a3e:	f043 0304 	orr.w	r3, r3, #4
 8002a42:	6713      	str	r3, [r2, #112]	; 0x70
 8002a44:	4b74      	ldr	r3, [pc, #464]	; (8002c18 <HAL_RCC_OscConfig+0x4d8>)
 8002a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a48:	4a73      	ldr	r2, [pc, #460]	; (8002c18 <HAL_RCC_OscConfig+0x4d8>)
 8002a4a:	f043 0301 	orr.w	r3, r3, #1
 8002a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a50:	e00b      	b.n	8002a6a <HAL_RCC_OscConfig+0x32a>
 8002a52:	4b71      	ldr	r3, [pc, #452]	; (8002c18 <HAL_RCC_OscConfig+0x4d8>)
 8002a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a56:	4a70      	ldr	r2, [pc, #448]	; (8002c18 <HAL_RCC_OscConfig+0x4d8>)
 8002a58:	f023 0301 	bic.w	r3, r3, #1
 8002a5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a5e:	4b6e      	ldr	r3, [pc, #440]	; (8002c18 <HAL_RCC_OscConfig+0x4d8>)
 8002a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a62:	4a6d      	ldr	r2, [pc, #436]	; (8002c18 <HAL_RCC_OscConfig+0x4d8>)
 8002a64:	f023 0304 	bic.w	r3, r3, #4
 8002a68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d015      	beq.n	8002a9e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a72:	f7fe f8a5 	bl	8000bc0 <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a78:	e00a      	b.n	8002a90 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a7a:	f7fe f8a1 	bl	8000bc0 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e0bc      	b.n	8002c0a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a90:	4b61      	ldr	r3, [pc, #388]	; (8002c18 <HAL_RCC_OscConfig+0x4d8>)
 8002a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0ee      	beq.n	8002a7a <HAL_RCC_OscConfig+0x33a>
 8002a9c:	e014      	b.n	8002ac8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a9e:	f7fe f88f 	bl	8000bc0 <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa4:	e00a      	b.n	8002abc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aa6:	f7fe f88b 	bl	8000bc0 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e0a6      	b.n	8002c0a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002abc:	4b56      	ldr	r3, [pc, #344]	; (8002c18 <HAL_RCC_OscConfig+0x4d8>)
 8002abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1ee      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ac8:	7dfb      	ldrb	r3, [r7, #23]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d105      	bne.n	8002ada <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ace:	4b52      	ldr	r3, [pc, #328]	; (8002c18 <HAL_RCC_OscConfig+0x4d8>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	4a51      	ldr	r2, [pc, #324]	; (8002c18 <HAL_RCC_OscConfig+0x4d8>)
 8002ad4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ad8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 8092 	beq.w	8002c08 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ae4:	4b4c      	ldr	r3, [pc, #304]	; (8002c18 <HAL_RCC_OscConfig+0x4d8>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 030c 	and.w	r3, r3, #12
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d05c      	beq.n	8002baa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d141      	bne.n	8002b7c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af8:	4b48      	ldr	r3, [pc, #288]	; (8002c1c <HAL_RCC_OscConfig+0x4dc>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afe:	f7fe f85f 	bl	8000bc0 <HAL_GetTick>
 8002b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b04:	e008      	b.n	8002b18 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b06:	f7fe f85b 	bl	8000bc0 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e078      	b.n	8002c0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b18:	4b3f      	ldr	r3, [pc, #252]	; (8002c18 <HAL_RCC_OscConfig+0x4d8>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1f0      	bne.n	8002b06 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	69da      	ldr	r2, [r3, #28]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	019b      	lsls	r3, r3, #6
 8002b34:	431a      	orrs	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3a:	085b      	lsrs	r3, r3, #1
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	041b      	lsls	r3, r3, #16
 8002b40:	431a      	orrs	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b46:	061b      	lsls	r3, r3, #24
 8002b48:	4933      	ldr	r1, [pc, #204]	; (8002c18 <HAL_RCC_OscConfig+0x4d8>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b4e:	4b33      	ldr	r3, [pc, #204]	; (8002c1c <HAL_RCC_OscConfig+0x4dc>)
 8002b50:	2201      	movs	r2, #1
 8002b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b54:	f7fe f834 	bl	8000bc0 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b5c:	f7fe f830 	bl	8000bc0 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e04d      	b.n	8002c0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b6e:	4b2a      	ldr	r3, [pc, #168]	; (8002c18 <HAL_RCC_OscConfig+0x4d8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0f0      	beq.n	8002b5c <HAL_RCC_OscConfig+0x41c>
 8002b7a:	e045      	b.n	8002c08 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b7c:	4b27      	ldr	r3, [pc, #156]	; (8002c1c <HAL_RCC_OscConfig+0x4dc>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b82:	f7fe f81d 	bl	8000bc0 <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b88:	e008      	b.n	8002b9c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b8a:	f7fe f819 	bl	8000bc0 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e036      	b.n	8002c0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b9c:	4b1e      	ldr	r3, [pc, #120]	; (8002c18 <HAL_RCC_OscConfig+0x4d8>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1f0      	bne.n	8002b8a <HAL_RCC_OscConfig+0x44a>
 8002ba8:	e02e      	b.n	8002c08 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d101      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e029      	b.n	8002c0a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bb6:	4b18      	ldr	r3, [pc, #96]	; (8002c18 <HAL_RCC_OscConfig+0x4d8>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d11c      	bne.n	8002c04 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d115      	bne.n	8002c04 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bde:	4013      	ands	r3, r2
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d10d      	bne.n	8002c04 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d106      	bne.n	8002c04 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d001      	beq.n	8002c08 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e000      	b.n	8002c0a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	40007000 	.word	0x40007000
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	42470060 	.word	0x42470060

08002c20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e0cc      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c34:	4b68      	ldr	r3, [pc, #416]	; (8002dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 030f 	and.w	r3, r3, #15
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d90c      	bls.n	8002c5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c42:	4b65      	ldr	r3, [pc, #404]	; (8002dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4a:	4b63      	ldr	r3, [pc, #396]	; (8002dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d001      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e0b8      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d020      	beq.n	8002caa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c74:	4b59      	ldr	r3, [pc, #356]	; (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	4a58      	ldr	r2, [pc, #352]	; (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0308 	and.w	r3, r3, #8
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d005      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c8c:	4b53      	ldr	r3, [pc, #332]	; (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	4a52      	ldr	r2, [pc, #328]	; (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c98:	4b50      	ldr	r3, [pc, #320]	; (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	494d      	ldr	r1, [pc, #308]	; (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d044      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d107      	bne.n	8002cce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cbe:	4b47      	ldr	r3, [pc, #284]	; (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d119      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e07f      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d003      	beq.n	8002cde <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	d107      	bne.n	8002cee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cde:	4b3f      	ldr	r3, [pc, #252]	; (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d109      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e06f      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cee:	4b3b      	ldr	r3, [pc, #236]	; (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e067      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cfe:	4b37      	ldr	r3, [pc, #220]	; (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f023 0203 	bic.w	r2, r3, #3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	4934      	ldr	r1, [pc, #208]	; (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d10:	f7fd ff56 	bl	8000bc0 <HAL_GetTick>
 8002d14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d16:	e00a      	b.n	8002d2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d18:	f7fd ff52 	bl	8000bc0 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e04f      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d2e:	4b2b      	ldr	r3, [pc, #172]	; (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 020c 	and.w	r2, r3, #12
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d1eb      	bne.n	8002d18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d40:	4b25      	ldr	r3, [pc, #148]	; (8002dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 030f 	and.w	r3, r3, #15
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d20c      	bcs.n	8002d68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4e:	4b22      	ldr	r3, [pc, #136]	; (8002dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d56:	4b20      	ldr	r3, [pc, #128]	; (8002dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d001      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e032      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d008      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d74:	4b19      	ldr	r3, [pc, #100]	; (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	4916      	ldr	r1, [pc, #88]	; (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0308 	and.w	r3, r3, #8
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d009      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d92:	4b12      	ldr	r3, [pc, #72]	; (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	490e      	ldr	r1, [pc, #56]	; (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002da6:	f000 f821 	bl	8002dec <HAL_RCC_GetSysClockFreq>
 8002daa:	4601      	mov	r1, r0
 8002dac:	4b0b      	ldr	r3, [pc, #44]	; (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	091b      	lsrs	r3, r3, #4
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	4a0a      	ldr	r2, [pc, #40]	; (8002de0 <HAL_RCC_ClockConfig+0x1c0>)
 8002db8:	5cd3      	ldrb	r3, [r2, r3]
 8002dba:	fa21 f303 	lsr.w	r3, r1, r3
 8002dbe:	4a09      	ldr	r2, [pc, #36]	; (8002de4 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dc2:	4b09      	ldr	r3, [pc, #36]	; (8002de8 <HAL_RCC_ClockConfig+0x1c8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fd feb6 	bl	8000b38 <HAL_InitTick>

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40023c00 	.word	0x40023c00
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	08003788 	.word	0x08003788
 8002de4:	2000001c 	.word	0x2000001c
 8002de8:	20000020 	.word	0x20000020

08002dec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002df2:	2300      	movs	r3, #0
 8002df4:	607b      	str	r3, [r7, #4]
 8002df6:	2300      	movs	r3, #0
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e02:	4b63      	ldr	r3, [pc, #396]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 030c 	and.w	r3, r3, #12
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d007      	beq.n	8002e1e <HAL_RCC_GetSysClockFreq+0x32>
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	d008      	beq.n	8002e24 <HAL_RCC_GetSysClockFreq+0x38>
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f040 80b4 	bne.w	8002f80 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e18:	4b5e      	ldr	r3, [pc, #376]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002e1a:	60bb      	str	r3, [r7, #8]
       break;
 8002e1c:	e0b3      	b.n	8002f86 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e1e:	4b5e      	ldr	r3, [pc, #376]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002e20:	60bb      	str	r3, [r7, #8]
      break;
 8002e22:	e0b0      	b.n	8002f86 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e24:	4b5a      	ldr	r3, [pc, #360]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e2c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e2e:	4b58      	ldr	r3, [pc, #352]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d04a      	beq.n	8002ed0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e3a:	4b55      	ldr	r3, [pc, #340]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	099b      	lsrs	r3, r3, #6
 8002e40:	f04f 0400 	mov.w	r4, #0
 8002e44:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e48:	f04f 0200 	mov.w	r2, #0
 8002e4c:	ea03 0501 	and.w	r5, r3, r1
 8002e50:	ea04 0602 	and.w	r6, r4, r2
 8002e54:	4629      	mov	r1, r5
 8002e56:	4632      	mov	r2, r6
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	f04f 0400 	mov.w	r4, #0
 8002e60:	0154      	lsls	r4, r2, #5
 8002e62:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e66:	014b      	lsls	r3, r1, #5
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4622      	mov	r2, r4
 8002e6c:	1b49      	subs	r1, r1, r5
 8002e6e:	eb62 0206 	sbc.w	r2, r2, r6
 8002e72:	f04f 0300 	mov.w	r3, #0
 8002e76:	f04f 0400 	mov.w	r4, #0
 8002e7a:	0194      	lsls	r4, r2, #6
 8002e7c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002e80:	018b      	lsls	r3, r1, #6
 8002e82:	1a5b      	subs	r3, r3, r1
 8002e84:	eb64 0402 	sbc.w	r4, r4, r2
 8002e88:	f04f 0100 	mov.w	r1, #0
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	00e2      	lsls	r2, r4, #3
 8002e92:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e96:	00d9      	lsls	r1, r3, #3
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4614      	mov	r4, r2
 8002e9c:	195b      	adds	r3, r3, r5
 8002e9e:	eb44 0406 	adc.w	r4, r4, r6
 8002ea2:	f04f 0100 	mov.w	r1, #0
 8002ea6:	f04f 0200 	mov.w	r2, #0
 8002eaa:	0262      	lsls	r2, r4, #9
 8002eac:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002eb0:	0259      	lsls	r1, r3, #9
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	4614      	mov	r4, r2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	4621      	mov	r1, r4
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f04f 0400 	mov.w	r4, #0
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	4623      	mov	r3, r4
 8002ec4:	f7fd f980 	bl	80001c8 <__aeabi_uldivmod>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	460c      	mov	r4, r1
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	e049      	b.n	8002f64 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ed0:	4b2f      	ldr	r3, [pc, #188]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	099b      	lsrs	r3, r3, #6
 8002ed6:	f04f 0400 	mov.w	r4, #0
 8002eda:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ede:	f04f 0200 	mov.w	r2, #0
 8002ee2:	ea03 0501 	and.w	r5, r3, r1
 8002ee6:	ea04 0602 	and.w	r6, r4, r2
 8002eea:	4629      	mov	r1, r5
 8002eec:	4632      	mov	r2, r6
 8002eee:	f04f 0300 	mov.w	r3, #0
 8002ef2:	f04f 0400 	mov.w	r4, #0
 8002ef6:	0154      	lsls	r4, r2, #5
 8002ef8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002efc:	014b      	lsls	r3, r1, #5
 8002efe:	4619      	mov	r1, r3
 8002f00:	4622      	mov	r2, r4
 8002f02:	1b49      	subs	r1, r1, r5
 8002f04:	eb62 0206 	sbc.w	r2, r2, r6
 8002f08:	f04f 0300 	mov.w	r3, #0
 8002f0c:	f04f 0400 	mov.w	r4, #0
 8002f10:	0194      	lsls	r4, r2, #6
 8002f12:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002f16:	018b      	lsls	r3, r1, #6
 8002f18:	1a5b      	subs	r3, r3, r1
 8002f1a:	eb64 0402 	sbc.w	r4, r4, r2
 8002f1e:	f04f 0100 	mov.w	r1, #0
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	00e2      	lsls	r2, r4, #3
 8002f28:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f2c:	00d9      	lsls	r1, r3, #3
 8002f2e:	460b      	mov	r3, r1
 8002f30:	4614      	mov	r4, r2
 8002f32:	195b      	adds	r3, r3, r5
 8002f34:	eb44 0406 	adc.w	r4, r4, r6
 8002f38:	f04f 0100 	mov.w	r1, #0
 8002f3c:	f04f 0200 	mov.w	r2, #0
 8002f40:	02a2      	lsls	r2, r4, #10
 8002f42:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002f46:	0299      	lsls	r1, r3, #10
 8002f48:	460b      	mov	r3, r1
 8002f4a:	4614      	mov	r4, r2
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	4621      	mov	r1, r4
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f04f 0400 	mov.w	r4, #0
 8002f56:	461a      	mov	r2, r3
 8002f58:	4623      	mov	r3, r4
 8002f5a:	f7fd f935 	bl	80001c8 <__aeabi_uldivmod>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	460c      	mov	r4, r1
 8002f62:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f64:	4b0a      	ldr	r3, [pc, #40]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	0c1b      	lsrs	r3, r3, #16
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	3301      	adds	r3, #1
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7c:	60bb      	str	r3, [r7, #8]
      break;
 8002f7e:	e002      	b.n	8002f86 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f80:	4b04      	ldr	r3, [pc, #16]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002f82:	60bb      	str	r3, [r7, #8]
      break;
 8002f84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f86:	68bb      	ldr	r3, [r7, #8]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f90:	40023800 	.word	0x40023800
 8002f94:	00f42400 	.word	0x00f42400
 8002f98:	007a1200 	.word	0x007a1200

08002f9c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f043 0201 	orr.w	r2, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f023 0201 	bic.w	r2, r3, #1
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	019b      	lsls	r3, r3, #6
 8002ff2:	f043 0220 	orr.w	r2, r3, #32
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4a09      	ldr	r2, [pc, #36]	; (8003028 <USB_FlushTxFifo+0x48>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d901      	bls.n	800300c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e006      	b.n	800301a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	f003 0320 	and.w	r3, r3, #32
 8003014:	2b20      	cmp	r3, #32
 8003016:	d0f0      	beq.n	8002ffa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3714      	adds	r7, #20
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	00030d40 	.word	0x00030d40

0800302c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003034:	2300      	movs	r3, #0
 8003036:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2210      	movs	r2, #16
 800303c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	3301      	adds	r3, #1
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4a09      	ldr	r2, [pc, #36]	; (800306c <USB_FlushRxFifo+0x40>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d901      	bls.n	8003050 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e006      	b.n	800305e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	f003 0310 	and.w	r3, r3, #16
 8003058:	2b10      	cmp	r3, #16
 800305a:	d0f0      	beq.n	800303e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	00030d40 	.word	0x00030d40

08003070 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003070:	b480      	push	{r7}
 8003072:	b089      	sub	sp, #36	; 0x24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	4613      	mov	r3, r2
 800307c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003086:	88fb      	ldrh	r3, [r7, #6]
 8003088:	3303      	adds	r3, #3
 800308a:	089b      	lsrs	r3, r3, #2
 800308c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800308e:	2300      	movs	r3, #0
 8003090:	61bb      	str	r3, [r7, #24]
 8003092:	e00b      	b.n	80030ac <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	601a      	str	r2, [r3, #0]
    pDest++;
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	3304      	adds	r3, #4
 80030a4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	3301      	adds	r3, #1
 80030aa:	61bb      	str	r3, [r7, #24]
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d3ef      	bcc.n	8003094 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80030b4:	69fb      	ldr	r3, [r7, #28]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3724      	adds	r7, #36	; 0x24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b085      	sub	sp, #20
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	4013      	ands	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80030da:	68fb      	ldr	r3, [r7, #12]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	f003 0301 	and.w	r3, r3, #1
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	460b      	mov	r3, r1
 800310e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003122:	f023 0303 	bic.w	r3, r3, #3
 8003126:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	78fb      	ldrb	r3, [r7, #3]
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	68f9      	ldr	r1, [r7, #12]
 8003138:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800313c:	4313      	orrs	r3, r2
 800313e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8003140:	78fb      	ldrb	r3, [r7, #3]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d107      	bne.n	8003156 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800314c:	461a      	mov	r2, r3
 800314e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003152:	6053      	str	r3, [r2, #4]
 8003154:	e009      	b.n	800316a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8003156:	78fb      	ldrb	r3, [r7, #3]
 8003158:	2b02      	cmp	r3, #2
 800315a:	d106      	bne.n	800316a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003162:	461a      	mov	r2, r3
 8003164:	f241 7370 	movw	r3, #6000	; 0x1770
 8003168:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	b29b      	uxth	r3, r3
}
 800318e:	4618      	mov	r0, r3
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800319a:	b480      	push	{r7}
 800319c:	b087      	sub	sp, #28
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
 80031a2:	460b      	mov	r3, r1
 80031a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80031aa:	78fb      	ldrb	r3, [r7, #3]
 80031ac:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80031ae:	2300      	movs	r3, #0
 80031b0:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	015a      	lsls	r2, r3, #5
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	4413      	add	r3, r2
 80031ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	0c9b      	lsrs	r3, r3, #18
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d002      	beq.n	80031d4 <USB_HC_Halt+0x3a>
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d16c      	bne.n	80032ae <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	0151      	lsls	r1, r2, #5
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	440a      	add	r2, r1
 80031ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80031f2:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d143      	bne.n	8003288 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	015a      	lsls	r2, r3, #5
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	4413      	add	r3, r2
 8003208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	0151      	lsls	r1, r2, #5
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	440a      	add	r2, r1
 8003216:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800321a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800321e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	015a      	lsls	r2, r3, #5
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	4413      	add	r3, r2
 8003228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	0151      	lsls	r1, r2, #5
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	440a      	add	r2, r1
 8003236:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800323a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800323e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	015a      	lsls	r2, r3, #5
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	4413      	add	r3, r2
 8003248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	0151      	lsls	r1, r2, #5
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	440a      	add	r2, r1
 8003256:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800325a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800325e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	3301      	adds	r3, #1
 8003264:	617b      	str	r3, [r7, #20]
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800326c:	d81d      	bhi.n	80032aa <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	015a      	lsls	r2, r3, #5
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	4413      	add	r3, r2
 8003276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003280:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003284:	d0ec      	beq.n	8003260 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8003286:	e080      	b.n	800338a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	4413      	add	r3, r2
 8003290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	0151      	lsls	r1, r2, #5
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	440a      	add	r2, r1
 800329e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032a6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80032a8:	e06f      	b.n	800338a <USB_HC_Halt+0x1f0>
          break;
 80032aa:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80032ac:	e06d      	b.n	800338a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	0151      	lsls	r1, r2, #5
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	440a      	add	r2, r1
 80032c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80032cc:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d143      	bne.n	8003366 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	015a      	lsls	r2, r3, #5
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	4413      	add	r3, r2
 80032e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	0151      	lsls	r1, r2, #5
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	440a      	add	r2, r1
 80032f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032fc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	015a      	lsls	r2, r3, #5
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	4413      	add	r3, r2
 8003306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	0151      	lsls	r1, r2, #5
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	440a      	add	r2, r1
 8003314:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003318:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800331c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4413      	add	r3, r2
 8003326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	0151      	lsls	r1, r2, #5
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	440a      	add	r2, r1
 8003334:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003338:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800333c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	3301      	adds	r3, #1
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800334a:	d81d      	bhi.n	8003388 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	015a      	lsls	r2, r3, #5
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	4413      	add	r3, r2
 8003354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800335e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003362:	d0ec      	beq.n	800333e <USB_HC_Halt+0x1a4>
 8003364:	e011      	b.n	800338a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	015a      	lsls	r2, r3, #5
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	4413      	add	r3, r2
 800336e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	0151      	lsls	r1, r2, #5
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	440a      	add	r2, r1
 800337c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003380:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	e000      	b.n	800338a <USB_HC_Halt+0x1f0>
          break;
 8003388:	bf00      	nop
    }
  }

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	371c      	adds	r7, #28
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f7ff fe08 	bl	8002fbe <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80033ae:	2110      	movs	r1, #16
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f7ff fe15 	bl	8002fe0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7ff fe38 	bl	800302c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80033bc:	2300      	movs	r3, #0
 80033be:	613b      	str	r3, [r7, #16]
 80033c0:	e01f      	b.n	8003402 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80033d8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80033e0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80033e8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	015a      	lsls	r2, r3, #5
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	4413      	add	r3, r2
 80033f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f6:	461a      	mov	r2, r3
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	3301      	adds	r3, #1
 8003400:	613b      	str	r3, [r7, #16]
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	2b0f      	cmp	r3, #15
 8003406:	d9dc      	bls.n	80033c2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8003408:	2300      	movs	r3, #0
 800340a:	613b      	str	r3, [r7, #16]
 800340c:	e034      	b.n	8003478 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	015a      	lsls	r2, r3, #5
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	4413      	add	r3, r2
 8003416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003424:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800342c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003434:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	015a      	lsls	r2, r3, #5
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	4413      	add	r3, r2
 800343e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003442:	461a      	mov	r2, r3
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	3301      	adds	r3, #1
 800344c:	617b      	str	r3, [r7, #20]
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003454:	d80c      	bhi.n	8003470 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	015a      	lsls	r2, r3, #5
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4413      	add	r3, r2
 800345e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003468:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800346c:	d0ec      	beq.n	8003448 <USB_StopHost+0xb0>
 800346e:	e000      	b.n	8003472 <USB_StopHost+0xda>
        break;
 8003470:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	3301      	adds	r3, #1
 8003476:	613b      	str	r3, [r7, #16]
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	2b0f      	cmp	r3, #15
 800347c:	d9c7      	bls.n	800340e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003484:	461a      	mov	r2, r3
 8003486:	f04f 33ff 	mov.w	r3, #4294967295
 800348a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f04f 32ff 	mov.w	r2, #4294967295
 8003492:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7ff fd81 	bl	8002f9c <USB_EnableGlobalInt>

  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80034b2:	1c5a      	adds	r2, r3, #1
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f804 	bl	80034c8 <USBH_HandleSof>
}
 80034c0:	bf00      	nop
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b0b      	cmp	r3, #11
 80034d8:	d10a      	bne.n	80034f0 <USBH_HandleSof+0x28>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d005      	beq.n	80034f0 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	4798      	blx	r3
  }
}
 80034f0:	bf00      	nop
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8003508:	bf00      	nop
}
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8003524:	bf00      	nop
}
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b082      	sub	sp, #8
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f883 	bl	800368a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	791b      	ldrb	r3, [r3, #4]
 8003588:	4619      	mov	r1, r3
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f80b 	bl	80035a6 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	795b      	ldrb	r3, [r3, #5]
 8003594:	4619      	mov	r1, r3
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f805 	bl	80035a6 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80035a6:	b480      	push	{r7}
 80035a8:	b083      	sub	sp, #12
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
 80035ae:	460b      	mov	r3, r1
 80035b0:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80035b2:	78fb      	ldrb	r3, [r7, #3]
 80035b4:	2b0a      	cmp	r3, #10
 80035b6:	d80d      	bhi.n	80035d4 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80035b8:	78fb      	ldrb	r3, [r7, #3]
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	33e0      	adds	r3, #224	; 0xe0
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	78fb      	ldrb	r3, [r7, #3]
 80035c6:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	33e0      	adds	r3, #224	; 0xe0
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b082      	sub	sp, #8
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff ff57 	bl	80034a4 <USBH_LL_IncTimer>
}
 80035f6:	bf00      	nop
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b082      	sub	sp, #8
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff ff8f 	bl	8003530 <USBH_LL_Connect>
}
 8003612:	bf00      	nop
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b082      	sub	sp, #8
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff ff98 	bl	800355e <USBH_LL_Disconnect>
}
 800362e:	bf00      	nop
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8003636:	b480      	push	{r7}
 8003638:	b083      	sub	sp, #12
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
 800363e:	460b      	mov	r3, r1
 8003640:	70fb      	strb	r3, [r7, #3]
 8003642:	4613      	mov	r3, r2
 8003644:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b082      	sub	sp, #8
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003660:	4618      	mov	r0, r3
 8003662:	f7ff ff49 	bl	80034f8 <USBH_LL_PortEnabled>
}
 8003666:	bf00      	nop
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b082      	sub	sp, #8
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff ff49 	bl	8003514 <USBH_LL_PortDisabled>
}
 8003682:	bf00      	nop
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b084      	sub	sp, #16
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8003692:	2300      	movs	r3, #0
 8003694:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8003696:	2300      	movs	r3, #0
 8003698:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7fd ff65 	bl	8001570 <HAL_HCD_Stop>
 80036a6:	4603      	mov	r3, r0
 80036a8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80036aa:	7bfb      	ldrb	r3, [r7, #15]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 f807 	bl	80036c0 <USBH_Get_USB_Status>
 80036b2:	4603      	mov	r3, r0
 80036b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80036b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	4603      	mov	r3, r0
 80036c8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80036ca:	2300      	movs	r3, #0
 80036cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80036ce:	79fb      	ldrb	r3, [r7, #7]
 80036d0:	2b03      	cmp	r3, #3
 80036d2:	d817      	bhi.n	8003704 <USBH_Get_USB_Status+0x44>
 80036d4:	a201      	add	r2, pc, #4	; (adr r2, 80036dc <USBH_Get_USB_Status+0x1c>)
 80036d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036da:	bf00      	nop
 80036dc:	080036ed 	.word	0x080036ed
 80036e0:	080036f3 	.word	0x080036f3
 80036e4:	080036f9 	.word	0x080036f9
 80036e8:	080036ff 	.word	0x080036ff
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80036ec:	2300      	movs	r3, #0
 80036ee:	73fb      	strb	r3, [r7, #15]
    break;
 80036f0:	e00b      	b.n	800370a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80036f2:	2302      	movs	r3, #2
 80036f4:	73fb      	strb	r3, [r7, #15]
    break;
 80036f6:	e008      	b.n	800370a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80036f8:	2301      	movs	r3, #1
 80036fa:	73fb      	strb	r3, [r7, #15]
    break;
 80036fc:	e005      	b.n	800370a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80036fe:	2302      	movs	r3, #2
 8003700:	73fb      	strb	r3, [r7, #15]
    break;
 8003702:	e002      	b.n	800370a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8003704:	2302      	movs	r3, #2
 8003706:	73fb      	strb	r3, [r7, #15]
    break;
 8003708:	bf00      	nop
  }
  return usb_status;
 800370a:	7bfb      	ldrb	r3, [r7, #15]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <__libc_init_array>:
 8003718:	b570      	push	{r4, r5, r6, lr}
 800371a:	4e0d      	ldr	r6, [pc, #52]	; (8003750 <__libc_init_array+0x38>)
 800371c:	4c0d      	ldr	r4, [pc, #52]	; (8003754 <__libc_init_array+0x3c>)
 800371e:	1ba4      	subs	r4, r4, r6
 8003720:	10a4      	asrs	r4, r4, #2
 8003722:	2500      	movs	r5, #0
 8003724:	42a5      	cmp	r5, r4
 8003726:	d109      	bne.n	800373c <__libc_init_array+0x24>
 8003728:	4e0b      	ldr	r6, [pc, #44]	; (8003758 <__libc_init_array+0x40>)
 800372a:	4c0c      	ldr	r4, [pc, #48]	; (800375c <__libc_init_array+0x44>)
 800372c:	f000 f820 	bl	8003770 <_init>
 8003730:	1ba4      	subs	r4, r4, r6
 8003732:	10a4      	asrs	r4, r4, #2
 8003734:	2500      	movs	r5, #0
 8003736:	42a5      	cmp	r5, r4
 8003738:	d105      	bne.n	8003746 <__libc_init_array+0x2e>
 800373a:	bd70      	pop	{r4, r5, r6, pc}
 800373c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003740:	4798      	blx	r3
 8003742:	3501      	adds	r5, #1
 8003744:	e7ee      	b.n	8003724 <__libc_init_array+0xc>
 8003746:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800374a:	4798      	blx	r3
 800374c:	3501      	adds	r5, #1
 800374e:	e7f2      	b.n	8003736 <__libc_init_array+0x1e>
 8003750:	080037a0 	.word	0x080037a0
 8003754:	080037a0 	.word	0x080037a0
 8003758:	080037a0 	.word	0x080037a0
 800375c:	080037a4 	.word	0x080037a4

08003760 <memset>:
 8003760:	4402      	add	r2, r0
 8003762:	4603      	mov	r3, r0
 8003764:	4293      	cmp	r3, r2
 8003766:	d100      	bne.n	800376a <memset+0xa>
 8003768:	4770      	bx	lr
 800376a:	f803 1b01 	strb.w	r1, [r3], #1
 800376e:	e7f9      	b.n	8003764 <memset+0x4>

08003770 <_init>:
 8003770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003772:	bf00      	nop
 8003774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003776:	bc08      	pop	{r3}
 8003778:	469e      	mov	lr, r3
 800377a:	4770      	bx	lr

0800377c <_fini>:
 800377c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800377e:	bf00      	nop
 8003780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003782:	bc08      	pop	{r3}
 8003784:	469e      	mov	lr, r3
 8003786:	4770      	bx	lr
